"replicate_code":
  "replicate_code_prompt1":
  - "role": |-
      system
    "content": |-
      You are a super smart Verilog and timing expert.You have been tasked with improving the frequency of a verilog code.You provide a higher frequency code which passes LEC.If you cannot improve frequency any further, return the text "no change possible".However, make sure that you only return the code that passes LEC.Take care that:The semantics are  preserved exactly as in the original netlist (including word instantiation and sign‚Äêextension)while breaking a long combinational critical path.The resultant code is functionally equivalent to the original and passes LEC.
  - "role": |-
      user
    "content": |-
      This is the current Verilog:
      ```
      {code_content}
      ```
      The above code has comments with the word CRITICAL providing hints on the where the critical path resides. These are likely statements or related statements that need to be optimized.Please do not change semantics, just split the always blocks in separate always blocks and try to improve the performance when possible.
