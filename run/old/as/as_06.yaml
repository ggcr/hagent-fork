context: 1
llm:
  model: openai/o3-mini-2025-01-31
verilog_original: |
  // Generated by CIRCT firtool-1.62.0
  // Standard header to adapt well known macros for prints and assertions.
  
  // Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
  `ifndef ASSERT_VERBOSE_COND_
    `ifdef ASSERT_VERBOSE_COND
      `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
    `else  // ASSERT_VERBOSE_COND
      `define ASSERT_VERBOSE_COND_ 1
    `endif // ASSERT_VERBOSE_COND
  `endif // not def ASSERT_VERBOSE_COND_
  
  // Users can define 'STOP_COND' to add an extra gate to stop conditions.
  `ifndef STOP_COND_
    `ifdef STOP_COND
      `define STOP_COND_ (`STOP_COND)
    `else  // STOP_COND
      `define STOP_COND_ 1
    `endif // STOP_COND
  `endif // not def STOP_COND_
  
  module Control(	// src/main/scala/Top.scala:1156:7
    input  [6:0] io_opcode,	// src/main/scala/Top.scala:1157:14
    output       io_itype,	// src/main/scala/Top.scala:1157:14
                 io_aluop,	// src/main/scala/Top.scala:1157:14
                 io_src1,	// src/main/scala/Top.scala:1157:14
    output [1:0] io_src2,	// src/main/scala/Top.scala:1157:14
    output       io_branch,	// src/main/scala/Top.scala:1157:14
    output [1:0] io_jumptype,	// src/main/scala/Top.scala:1157:14
    output       io_resultselect,	// src/main/scala/Top.scala:1157:14
    output [1:0] io_memop,	// src/main/scala/Top.scala:1157:14
    output       io_toreg,	// src/main/scala/Top.scala:1157:14
                 io_regwrite,	// src/main/scala/Top.scala:1157:14
                 io_wordinst	// src/main/scala/Top.scala:1157:14
  );
  
    wire _signals_T_1 = io_opcode == 7'h33;	// src/main/scala/chisel3/util/Lookup.scala:31:38
    wire _signals_T_3 = io_opcode == 7'h13;	// src/main/scala/chisel3/util/Lookup.scala:31:38
    wire _signals_T_110 = io_opcode == 7'h3;	// src/main/scala/chisel3/util/Lookup.scala:31:38
    wire _signals_T_7 = io_opcode == 7'h23;	// src/main/scala/chisel3/util/Lookup.scala:31:38
    wire _signals_T_68 = io_opcode == 7'h63;	// src/main/scala/chisel3/util/Lookup.scala:31:38
    wire _signals_T_87 = io_opcode == 7'h37;	// src/main/scala/chisel3/util/Lookup.scala:31:38
    wire _signals_T_13 = io_opcode == 7'h17;	// src/main/scala/chisel3/util/Lookup.scala:31:38
    wire _signals_T_15 = io_opcode == 7'h6F;	// src/main/scala/chisel3/util/Lookup.scala:31:38
    wire _signals_T_44 = io_opcode == 7'h67;	// src/main/scala/chisel3/util/Lookup.scala:31:38
    wire _signals_T_53 = io_opcode == 7'h1B;	// src/main/scala/chisel3/util/Lookup.scala:31:38
    wire _signals_T_132 = io_opcode == 7'h3B;	// src/main/scala/chisel3/util/Lookup.scala:31:38
    wire _GEN = _signals_T_15 | _signals_T_44;	// src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    wire _GEN_0 =
      _signals_T_110 | _signals_T_7 | _signals_T_68 | _signals_T_87 | _signals_T_13 | _GEN;	// src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    wire _GEN_1 = _signals_T_1 | _signals_T_3;	// src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    wire _GEN_2 = _signals_T_68 | _signals_T_87;	// src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    wire _GEN_3 = _signals_T_3 | _signals_T_110 | _signals_T_7;	// src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    wire _GEN_4 = _signals_T_7 | _signals_T_68;	// src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    assign io_itype = ~_signals_T_1 & (_signals_T_3 | ~_GEN_0 & _signals_T_53);	// src/main/scala/Top.scala:1156:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    assign io_aluop = _GEN_1 | ~_GEN_0 & (_signals_T_53 | _signals_T_132);	// src/main/scala/Top.scala:1156:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    assign io_src1 =
      ~(_signals_T_1 | _signals_T_3 | _signals_T_110 | _signals_T_7 | _GEN_2)
      & (_signals_T_13 | _signals_T_15 | _signals_T_44);	// src/main/scala/Top.scala:1156:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    assign io_src2 =
      _signals_T_1
        ? 2'h0
        : _GEN_3
            ? 2'h1
            : _GEN_2 ? 2'h0 : _signals_T_13 ? 2'h1 : _GEN ? 2'h2 : {1'h0, _signals_T_53};	// src/main/scala/Top.scala:1156:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    assign io_branch = ~(_signals_T_1 | _GEN_3) & _signals_T_68;	// src/main/scala/Top.scala:1156:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    assign io_jumptype =
      _signals_T_1 | _signals_T_3 | _signals_T_110 | _signals_T_7 | _signals_T_68
      | _signals_T_87 | _signals_T_13
        ? 2'h0
        : _signals_T_15 ? 2'h2 : {2{_signals_T_44}};	// src/main/scala/Top.scala:1156:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    assign io_resultselect =
      ~(_signals_T_1 | _signals_T_3 | _signals_T_110 | _GEN_4) & _signals_T_87;	// src/main/scala/Top.scala:1156:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    assign io_memop = _GEN_1 ? 2'h0 : _signals_T_110 ? 2'h2 : {2{_signals_T_7}};	// src/main/scala/Top.scala:1156:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    assign io_toreg = ~_GEN_1 & _signals_T_110;	// src/main/scala/Top.scala:1156:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    assign io_regwrite =
      _signals_T_1 | _signals_T_3 | _signals_T_110 | ~_GEN_4
      & (_signals_T_87 | _signals_T_13 | _signals_T_15 | _signals_T_44 | _signals_T_53
         | _signals_T_132);	// src/main/scala/Top.scala:1156:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    assign io_wordinst =
      ~(_signals_T_1 | _signals_T_3 | _GEN_0) & (_signals_T_53 | _signals_T_132);	// src/main/scala/Top.scala:1156:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
  endmodule
  
  module RegisterFile(	// src/main/scala/Top.scala:896:7
    input         clock,	// src/main/scala/Top.scala:896:7
    input  [4:0]  io_readreg1,	// src/main/scala/Top.scala:897:14
                  io_readreg2,	// src/main/scala/Top.scala:897:14
                  io_writereg,	// src/main/scala/Top.scala:897:14
    input  [63:0] io_writedata,	// src/main/scala/Top.scala:897:14
    input         io_wen,	// src/main/scala/Top.scala:897:14
    output [63:0] io_readdata1,	// src/main/scala/Top.scala:897:14
                  io_readdata2	// src/main/scala/Top.scala:897:14
  );
  
    reg [63:0] regs_0;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_1;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_2;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_3;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_4;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_5;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_6;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_7;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_8;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_9;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_10;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_11;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_12;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_13;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_14;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_15;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_16;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_17;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_18;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_19;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_20;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_21;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_22;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_23;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_24;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_25;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_26;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_27;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_28;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_29;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_30;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_31;	// src/main/scala/Top.scala:912:17
    reg [63:0] casez_tmp;	// src/main/scala/Top.scala:921:16
    always_comb begin	// src/main/scala/Top.scala:921:16
      casez (io_readreg1)	// src/main/scala/Top.scala:921:16
        5'b00000:
          casez_tmp = regs_0;	// src/main/scala/Top.scala:912:17, :921:16
        5'b00001:
          casez_tmp = regs_1;	// src/main/scala/Top.scala:912:17, :921:16
        5'b00010:
          casez_tmp = regs_2;	// src/main/scala/Top.scala:912:17, :921:16
        5'b00011:
          casez_tmp = regs_3;	// src/main/scala/Top.scala:912:17, :921:16
        5'b00100:
          casez_tmp = regs_4;	// src/main/scala/Top.scala:912:17, :921:16
        5'b00101:
          casez_tmp = regs_5;	// src/main/scala/Top.scala:912:17, :921:16
        5'b00110:
          casez_tmp = regs_6;	// src/main/scala/Top.scala:912:17, :921:16
        5'b00111:
          casez_tmp = regs_7;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01000:
          casez_tmp = regs_8;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01001:
          casez_tmp = regs_9;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01010:
          casez_tmp = regs_10;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01011:
          casez_tmp = regs_11;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01100:
          casez_tmp = regs_12;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01101:
          casez_tmp = regs_13;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01110:
          casez_tmp = regs_14;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01111:
          casez_tmp = regs_15;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10000:
          casez_tmp = regs_16;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10001:
          casez_tmp = regs_17;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10010:
          casez_tmp = regs_18;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10011:
          casez_tmp = regs_19;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10100:
          casez_tmp = regs_20;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10101:
          casez_tmp = regs_21;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10110:
          casez_tmp = regs_22;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10111:
          casez_tmp = regs_23;	// src/main/scala/Top.scala:912:17, :921:16
        5'b11000:
          casez_tmp = regs_24;	// src/main/scala/Top.scala:912:17, :921:16
        5'b11001:
          casez_tmp = regs_25;	// src/main/scala/Top.scala:912:17, :921:16
        5'b11010:
          casez_tmp = regs_26;	// src/main/scala/Top.scala:912:17, :921:16
        5'b11011:
          casez_tmp = regs_27;	// src/main/scala/Top.scala:912:17, :921:16
        5'b11100:
          casez_tmp = regs_28;	// src/main/scala/Top.scala:912:17, :921:16
        5'b11101:
          casez_tmp = regs_29;	// src/main/scala/Top.scala:912:17, :921:16
        5'b11110:
          casez_tmp = regs_30;	// src/main/scala/Top.scala:912:17, :921:16
        default:
          casez_tmp = regs_31;	// src/main/scala/Top.scala:912:17, :921:16
      endcase	// src/main/scala/Top.scala:921:16
    end // always_comb
    reg [63:0] casez_tmp_0;	// src/main/scala/Top.scala:922:16
    always_comb begin	// src/main/scala/Top.scala:921:16
      casez (io_readreg2)	// src/main/scala/Top.scala:921:16
        5'b00000:
          casez_tmp_0 = regs_0;	// src/main/scala/Top.scala:912:17, :921:16
        5'b00001:
          casez_tmp_0 = regs_1;	// src/main/scala/Top.scala:912:17, :921:16
        5'b00010:
          casez_tmp_0 = regs_2;	// src/main/scala/Top.scala:912:17, :921:16
        5'b00011:
          casez_tmp_0 = regs_3;	// src/main/scala/Top.scala:912:17, :921:16
        5'b00100:
          casez_tmp_0 = regs_4;	// src/main/scala/Top.scala:912:17, :921:16
        5'b00101:
          casez_tmp_0 = regs_5;	// src/main/scala/Top.scala:912:17, :921:16
        5'b00110:
          casez_tmp_0 = regs_6;	// src/main/scala/Top.scala:912:17, :921:16
        5'b00111:
          casez_tmp_0 = regs_7;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01000:
          casez_tmp_0 = regs_8;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01001:
          casez_tmp_0 = regs_9;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01010:
          casez_tmp_0 = regs_10;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01011:
          casez_tmp_0 = regs_11;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01100:
          casez_tmp_0 = regs_12;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01101:
          casez_tmp_0 = regs_13;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01110:
          casez_tmp_0 = regs_14;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01111:
          casez_tmp_0 = regs_15;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10000:
          casez_tmp_0 = regs_16;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10001:
          casez_tmp_0 = regs_17;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10010:
          casez_tmp_0 = regs_18;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10011:
          casez_tmp_0 = regs_19;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10100:
          casez_tmp_0 = regs_20;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10101:
          casez_tmp_0 = regs_21;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10110:
          casez_tmp_0 = regs_22;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10111:
          casez_tmp_0 = regs_23;	// src/main/scala/Top.scala:912:17, :921:16
        5'b11000:
          casez_tmp_0 = regs_24;	// src/main/scala/Top.scala:912:17, :921:16
        5'b11001:
          casez_tmp_0 = regs_25;	// src/main/scala/Top.scala:912:17, :921:16
        5'b11010:
          casez_tmp_0 = regs_26;	// src/main/scala/Top.scala:912:17, :921:16
        5'b11011:
          casez_tmp_0 = regs_27;	// src/main/scala/Top.scala:912:17, :921:16
        5'b11100:
          casez_tmp_0 = regs_28;	// src/main/scala/Top.scala:912:17, :921:16
        5'b11101:
          casez_tmp_0 = regs_29;	// src/main/scala/Top.scala:912:17, :921:16
        5'b11110:
          casez_tmp_0 = regs_30;	// src/main/scala/Top.scala:912:17, :921:16
        default:
          casez_tmp_0 = regs_31;	// src/main/scala/Top.scala:912:17, :921:16
      endcase	// src/main/scala/Top.scala:921:16
    end // always_comb
    always @(posedge clock) begin	// src/main/scala/Top.scala:896:7
      if (io_wen & io_writereg == 5'h0)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_0 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h1)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_1 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h2)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_2 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h3)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_3 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h4)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_4 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h5)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_5 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h6)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_6 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h7)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_7 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h8)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_8 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h9)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_9 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'hA)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_10 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'hB)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_11 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'hC)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_12 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'hD)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_13 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'hE)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_14 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'hF)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_15 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h10)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_16 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h11)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_17 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h12)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_18 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h13)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_19 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h14)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_20 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h15)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_21 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h16)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_22 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h17)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_23 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h18)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_24 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h19)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_25 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h1A)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_26 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h1B)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_27 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h1C)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_28 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h1D)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_29 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h1E)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_30 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & (&io_writereg))	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_31 <= io_writedata;	// src/main/scala/Top.scala:912:17
    end // always @(posedge)
    assign io_readdata1 = casez_tmp;	// src/main/scala/Top.scala:896:7, :921:16
    assign io_readdata2 = casez_tmp_0;	// src/main/scala/Top.scala:896:7, :922:16
  endmodule
  
  module ALUControl(	// src/main/scala/Top.scala:1327:7
    input        io_aluop,	// src/main/scala/Top.scala:1328:14
                 io_itype,	// src/main/scala/Top.scala:1328:14
    input  [6:0] io_funct7,	// src/main/scala/Top.scala:1328:14
    input  [2:0] io_funct3,	// src/main/scala/Top.scala:1328:14
    input        io_wordinst,	// src/main/scala/Top.scala:1328:14
    output [4:0] io_operation	// src/main/scala/Top.scala:1328:14
  );
  
    reg [4:0] casez_tmp;	// src/main/scala/Top.scala:1341:35, :1342:52, :1357:42
    always_comb begin	// src/main/scala/Top.scala:1341:{21,35}, :1342:52, :1357:{28,42}, :1358:26, :1363:{28,42}, :1364:20, :1365:{28,42}, :1366:20, :1367:{28,42}, :1368:20, :1369:{28,42}, :1370:45, :1385:{28,42}, :1386:20, :1388:20
      casez (io_funct3)	// src/main/scala/Top.scala:1341:{21,35}, :1342:52, :1357:{28,42}, :1358:26, :1363:{28,42}, :1364:20, :1365:{28,42}, :1366:20, :1367:{28,42}, :1368:20, :1369:{28,42}, :1370:45, :1385:{28,42}, :1386:20, :1388:20
        3'b000:
          casez_tmp =
            io_itype | io_funct7 == 7'h0
              ? {io_wordinst, 4'h7}
              : io_funct7 == 7'h20 ? {io_wordinst, 4'h4} : 5'h1F;	// src/main/scala/Top.scala:1341:{21,35}, :1342:{22,34,52}, :1343:28, :1344:24, :1346:24, :1348:{30,48}, :1349:36, :1350:24, :1352:24, :1355:22, :1357:{28,42}, :1358:26, :1363:{28,42}, :1364:20, :1365:{28,42}, :1366:20, :1367:{28,42}, :1368:20, :1369:{28,42}, :1370:45, :1385:{28,42}, :1386:20, :1388:20
        3'b001:
          casez_tmp = {io_wordinst, 4'h8};	// src/main/scala/Top.scala:1341:{21,35}, :1342:52, :1357:{28,42}, :1358:26, :1359:22, :1361:22, :1363:{28,42}, :1364:20, :1365:{28,42}, :1366:20, :1367:{28,42}, :1368:20, :1369:{28,42}, :1370:45, :1385:{28,42}, :1386:20, :1388:20
        3'b010:
          casez_tmp = 5'h9;	// src/main/scala/Top.scala:1341:{21,35}, :1342:52, :1357:{28,42}, :1358:26, :1363:{28,42}, :1364:20, :1365:{28,42}, :1366:20, :1367:{28,42}, :1368:20, :1369:{28,42}, :1370:45, :1385:{28,42}, :1386:20, :1388:20
        3'b011:
          casez_tmp = 5'h1;	// src/main/scala/Top.scala:1341:{21,35}, :1342:52, :1357:{28,42}, :1358:26, :1363:{28,42}, :1364:20, :1365:{28,42}, :1366:20, :1367:{28,42}, :1368:20, :1369:{28,42}, :1370:45, :1385:{28,42}, :1386:20, :1388:20
        3'b100:
          casez_tmp = 5'h0;	// src/main/scala/Top.scala:1341:{21,35}, :1342:52, :1357:{28,42}, :1358:26, :1363:{28,42}, :1364:20, :1365:{28,42}, :1366:20, :1367:{28,42}, :1368:20, :1369:{28,42}, :1370:45, :1385:{28,42}, :1386:20, :1388:20
        3'b101:
          casez_tmp =
            io_funct7[6:1] == 6'h0
              ? {io_wordinst, 4'h2}
              : io_funct7[6:1] == 6'h10 ? {io_wordinst, 4'h3} : 5'h1F;	// src/main/scala/Top.scala:1341:{21,35}, :1342:52, :1355:22, :1357:{28,42}, :1358:26, :1363:{28,42}, :1364:20, :1365:{28,42}, :1366:20, :1367:{28,42}, :1368:20, :1369:{28,42}, :1370:{22,28,45}, :1371:28, :1372:24, :1374:24, :1376:{35,52}, :1377:28, :1378:24, :1380:24, :1383:22, :1385:{28,42}, :1386:20, :1388:20
        3'b110:
          casez_tmp = 5'h5;	// src/main/scala/Top.scala:1341:{21,35}, :1342:52, :1357:{28,42}, :1358:26, :1363:{28,42}, :1364:20, :1365:{28,42}, :1366:20, :1367:{28,42}, :1368:20, :1369:{28,42}, :1370:45, :1385:{28,42}, :1386:20, :1388:20
        default:
          casez_tmp = 5'h6;	// src/main/scala/Top.scala:1341:{21,35}, :1342:52, :1357:{28,42}, :1358:26, :1363:{28,42}, :1364:20, :1365:{28,42}, :1366:20, :1367:{28,42}, :1368:20, :1369:{28,42}, :1370:45, :1385:{28,42}, :1386:20, :1388:20
      endcase	// src/main/scala/Top.scala:1341:{21,35}, :1342:52, :1357:{28,42}, :1358:26, :1363:{28,42}, :1364:20, :1365:{28,42}, :1366:20, :1367:{28,42}, :1368:20, :1369:{28,42}, :1370:45, :1385:{28,42}, :1386:20, :1388:20
    end // always_comb
    assign io_operation = io_aluop ? casez_tmp : 5'h7;	// src/main/scala/Top.scala:1327:7, :1338:27, :1339:18, :1341:35, :1342:52, :1357:42
  endmodule
  
  module ALU(	// src/main/scala/Top.scala:1225:7
    input  [4:0]  io_operation,	// src/main/scala/Top.scala:1226:14
    input  [63:0] io_inputx,	// src/main/scala/Top.scala:1226:14
                  io_inputy,	// src/main/scala/Top.scala:1226:14
    output [63:0] io_result	// src/main/scala/Top.scala:1226:14
  );
  
    reg  [63:0]  casez_tmp;	// src/main/scala/Top.scala:1242:30, :1243:15, :1245:35
    wire [126:0] _io_result_T_50 = {63'h0, io_inputx} << io_inputy[5:0];	// src/main/scala/Top.scala:1271:15, :1290:{30,42}
    wire [31:0]  _io_result_T_36 = io_inputx[31:0] >> io_inputy[4:0];	// src/main/scala/Top.scala:1239:30, :1240:30, :1278:{49,63}
    wire [31:0]  _io_result_T_20 = $signed($signed(io_inputx[31:0]) >>> io_inputy[4:0]);	// src/main/scala/Top.scala:1239:30, :1240:30, :1264:{57,71}
    wire [31:0]  _io_result_T_10 = io_inputx[31:0] - io_inputy[31:0];	// src/main/scala/Top.scala:1239:30, :1240:30, :1257:49
    wire [31:0]  _io_result_T_2 = io_inputx[31:0] + io_inputy[31:0];	// src/main/scala/Top.scala:1239:30, :1240:30, :1250:49
    wire [62:0]  _io_result_T_44 = {31'h0, io_inputx[31:0]} << io_inputy[4:0];	// src/main/scala/Top.scala:1239:30, :1240:30, :1288:{49,63}
    always_comb begin	// src/main/scala/Top.scala:1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
      casez (io_operation[3:0])	// src/main/scala/Top.scala:1235:27, :1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
        4'b0000:
          casez_tmp = io_inputx ^ io_inputy;	// src/main/scala/Top.scala:1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:{15,28}, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
        4'b0001:
          casez_tmp = {63'h0, io_inputx < io_inputy};	// src/main/scala/Top.scala:1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:{15,29}, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
        4'b0010:
          casez_tmp =
            io_operation[4]
              ? {{32{_io_result_T_36[31]}}, _io_result_T_36}
              : io_inputx >> io_inputy[5:0];	// src/main/scala/Top.scala:1234:34, :1238:{46,51,61}, :1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1278:{17,49}, :1280:{17,30,42}, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
        4'b0011:
          casez_tmp =
            io_operation[4]
              ? {{32{_io_result_T_20[31]}}, _io_result_T_20}
              : $signed($signed(io_inputx) >>> io_inputy[5:0]);	// src/main/scala/Top.scala:1234:34, :1238:{46,51,61}, :1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1264:{17,57,79}, :1267:{17,38,50}, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
        4'b0100:
          casez_tmp =
            io_operation[4]
              ? {{32{_io_result_T_10[31]}}, _io_result_T_10}
              : io_inputx - io_inputy;	// src/main/scala/Top.scala:1234:34, :1238:{46,51,61}, :1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1257:{17,49}, :1259:{17,30}, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
        4'b0101:
          casez_tmp = io_inputx | io_inputy;	// src/main/scala/Top.scala:1242:{15,30}, :1243:15, :1245:{20,35}, :1246:{15,28}, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
        4'b0110:
          casez_tmp = io_inputx & io_inputy;	// src/main/scala/Top.scala:1242:{15,30}, :1243:{15,28}, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
        4'b0111:
          casez_tmp =
            io_operation[4]
              ? {{32{_io_result_T_2[31]}}, _io_result_T_2}
              : io_inputx + io_inputy;	// src/main/scala/Top.scala:1234:34, :1238:{46,51,61}, :1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1250:{17,49}, :1252:{17,30}, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
        4'b1000:
          casez_tmp =
            io_operation[4]
              ? {{32{_io_result_T_44[31]}}, _io_result_T_44[31:0]}
              : _io_result_T_50[63:0];	// src/main/scala/Top.scala:1234:34, :1238:{46,51,61,73}, :1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1288:{17,49}, :1290:{17,30}, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
        4'b1001:
          casez_tmp = {63'h0, $signed(io_inputx) < $signed(io_inputy)};	// src/main/scala/Top.scala:1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:{15,36}, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
        4'b1010:
          casez_tmp = ~(io_inputx | io_inputy);	// src/main/scala/Top.scala:1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:{15,18,30}, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
        4'b1011:
          casez_tmp = {63'h0, $signed(io_inputx) >= $signed(io_inputy)};	// src/main/scala/Top.scala:1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:{15,36}, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
        4'b1100:
          casez_tmp = {63'h0, io_inputx >= io_inputy};	// src/main/scala/Top.scala:1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:{15,29}, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
        4'b1101:
          casez_tmp = {63'h0, io_inputx == io_inputy};	// src/main/scala/Top.scala:1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:{15,28}, :1305:{20,35}, :1306:15, :1309:15
        4'b1110:
          casez_tmp = {63'h0, io_inputx != io_inputy};	// src/main/scala/Top.scala:1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:{15,28}, :1309:15
        default:
          casez_tmp = 64'h0;	// src/main/scala/Top.scala:1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
      endcase	// src/main/scala/Top.scala:1235:27, :1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
    end // always_comb
    assign io_result = casez_tmp;	// src/main/scala/Top.scala:1225:7, :1242:30, :1243:15, :1245:35
  endmodule
  
  module ImmediateGenerator(	// src/main/scala/Top.scala:962:7
    input  [63:0] io_instruction,	// src/main/scala/Top.scala:963:14
    output [63:0] io_sextImm	// src/main/scala/Top.scala:963:14
  );
  
    assign io_sextImm =
      io_instruction[6:0] == 7'h37
        ? {{32{io_instruction[31]}}, io_instruction[31:12], 12'h0}
        : io_instruction[6:0] == 7'h17
            ? {{32{io_instruction[31]}}, io_instruction[31:12], 12'h0}
            : io_instruction[6:0] == 7'h6F
                ? {{44{io_instruction[31]}},
                   io_instruction[19:12],
                   io_instruction[20],
                   io_instruction[30:21],
                   1'h0}
                : io_instruction[6:0] == 7'h67
                    ? {{52{io_instruction[31]}}, io_instruction[31:20]}
                    : io_instruction[6:0] == 7'h63
                        ? {{52{io_instruction[31]}},
                           io_instruction[7],
                           io_instruction[30:25],
                           io_instruction[11:8],
                           1'h0}
                        : io_instruction[6:0] == 7'h3
                            ? {{52{io_instruction[31]}}, io_instruction[31:20]}
                            : io_instruction[6:0] == 7'h23
                                ? {{52{io_instruction[31]}},
                                   io_instruction[31:25],
                                   io_instruction[11:7]}
                                : io_instruction[6:0] == 7'h13
                                    ? {{52{io_instruction[31]}}, io_instruction[31:20]}
                                    : io_instruction[6:0] == 7'h1B
                                        ? {{52{io_instruction[31]}}, io_instruction[31:20]}
                                        : io_instruction[6:0] == 7'h73
                                            ? {59'h0, io_instruction[19:15]}
                                            : 64'h0;	// src/main/scala/Top.scala:962:7, :969:14, :971:30, :973:18, :978:31, :979:{18,24,29,37,53}, :985:31, :986:{18,24,29,37}, :991:{35,55}, :992:{35,55}, :993:{18,24}, :996:31, :997:{18,24,29,36}, :1000:{35,55}, :1001:{35,58}, :1002:{18,24}, :1005:31, :1006:{18,24,29,37}, :1009:{35,59}, :1010:{18,24,29,37}, :1013:31, :1014:{18,24,29,36}, :1017:31, :1018:{18,24,29,36}, :1021:{18,24,29,53}
  endmodule
  
  module NextPC(	// src/main/scala/Top.scala:1410:7
    input         io_branch,	// src/main/scala/Top.scala:1411:14
    input  [1:0]  io_jumptype,	// src/main/scala/Top.scala:1411:14
    input  [63:0] io_inputx,	// src/main/scala/Top.scala:1411:14
                  io_inputy,	// src/main/scala/Top.scala:1411:14
    input  [2:0]  io_funct3,	// src/main/scala/Top.scala:1411:14
    input  [63:0] io_pc,	// src/main/scala/Top.scala:1411:14
                  io_imm,	// src/main/scala/Top.scala:1411:14
    output [63:0] io_nextpc	// src/main/scala/Top.scala:1411:14
  );
  
    assign io_nextpc =
      io_branch
        ? (io_funct3 == 3'h0 & io_inputx == io_inputy | io_funct3 == 3'h1
           & io_inputx != io_inputy | io_funct3 == 3'h4
           & $signed(io_inputx) < $signed(io_inputy) | io_funct3 == 3'h5
           & $signed(io_inputx) >= $signed(io_inputy) | io_funct3 == 3'h6
           & io_inputx < io_inputy | (&io_funct3) & io_inputx >= io_inputy
             ? io_pc + io_imm
             : io_pc + 64'h4)
        : (|io_jumptype)
            ? (io_jumptype[0] ? io_inputx + io_imm : io_pc + io_imm)
            : io_pc + 64'h4;	// src/main/scala/Top.scala:1410:7, :1424:20, :1425:{23,36,48}, :1426:{23,36,48}, :1427:{23,36,55}, :1428:{23,36,55}, :1429:{23,36,48}, :1430:{10,23,36,48,63}, :1431:{17,26}, :1435:{17,26}, :1438:{28,37}, :1439:{15,21,33,48}, :1440:44, :1443:{15,24}
  endmodule
  
  module SingleCycleCPU(	// src/main/scala/Top.scala:1038:7
    input         clock,	// src/main/scala/Top.scala:1038:7
                  reset,	// src/main/scala/Top.scala:1038:7
    output [63:0] io_imem_address,	// src/main/scala/Top.scala:12:14
    output        io_imem_valid,	// src/main/scala/Top.scala:12:14
    input         io_imem_good,	// src/main/scala/Top.scala:12:14
    input  [63:0] io_imem_instruction,	// src/main/scala/Top.scala:12:14
    input         io_imem_ready,	// src/main/scala/Top.scala:12:14
    output [63:0] io_dmem_address,	// src/main/scala/Top.scala:12:14
    output        io_dmem_valid,	// src/main/scala/Top.scala:12:14
    input         io_dmem_good,	// src/main/scala/Top.scala:12:14
    output [63:0] io_dmem_writedata,	// src/main/scala/Top.scala:12:14
    output        io_dmem_memread,	// src/main/scala/Top.scala:12:14
                  io_dmem_memwrite,	// src/main/scala/Top.scala:12:14
    output [1:0]  io_dmem_maskmode,	// src/main/scala/Top.scala:12:14
    output        io_dmem_sext,	// src/main/scala/Top.scala:12:14
    input  [63:0] io_dmem_readdata	// src/main/scala/Top.scala:12:14
  );
  
    wire [63:0] _nextpc_io_nextpc;	// src/main/scala/Top.scala:1046:26
    wire [63:0] _immGen_io_sextImm;	// src/main/scala/Top.scala:1045:26
    wire [63:0] _alu_io_result;	// src/main/scala/Top.scala:1044:26
    wire [4:0]  _aluControl_io_operation;	// src/main/scala/Top.scala:1043:26
    wire [63:0] _registers_io_readdata1;	// src/main/scala/Top.scala:1042:26
    wire [63:0] _registers_io_readdata2;	// src/main/scala/Top.scala:1042:26
    wire        _control_io_itype;	// src/main/scala/Top.scala:1041:26
    wire        _control_io_aluop;	// src/main/scala/Top.scala:1041:26
    wire        _control_io_src1;	// src/main/scala/Top.scala:1041:26
    wire [1:0]  _control_io_src2;	// src/main/scala/Top.scala:1041:26
    wire        _control_io_branch;	// src/main/scala/Top.scala:1041:26
    wire [1:0]  _control_io_jumptype;	// src/main/scala/Top.scala:1041:26
    wire        _control_io_resultselect;	// src/main/scala/Top.scala:1041:26
    wire [1:0]  _control_io_memop;	// src/main/scala/Top.scala:1041:26
    wire        _control_io_toreg;	// src/main/scala/Top.scala:1041:26
    wire        _control_io_regwrite;	// src/main/scala/Top.scala:1041:26
    wire        _control_io_wordinst;	// src/main/scala/Top.scala:1041:26
    reg  [63:0] pc;	// src/main/scala/Top.scala:1040:37
    wire [63:0] _GEN = pc % 64'h8;	// src/main/scala/Top.scala:1040:37, :1054:13
    wire [31:0] instruction =
      _GEN[3:0] == 4'h4 ? io_imem_instruction[63:32] : io_imem_instruction[31:0];	// src/main/scala/Top.scala:1054:{13,20,29}, :1055:{17,39}, :1057:{17,39}
    wire [63:0] _alu_io_inputy_T_5 =
      _control_io_src2 == 2'h0
        ? _registers_io_readdata2
        : _control_io_src2 == 2'h1
            ? _immGen_io_sextImm
            : {61'h0, _control_io_src2 == 2'h2, 2'h0};	// src/main/scala/Top.scala:1041:26, :1042:26, :1045:26, :1091:54, :1092:56, :1093:56, src/main/scala/chisel3/util/Mux.scala:126:16
    always @(posedge clock) begin	// src/main/scala/Top.scala:1038:7
      if (reset)	// src/main/scala/Top.scala:1038:7
        pc <= 64'h0;	// src/main/scala/Top.scala:1040:37
      else	// src/main/scala/Top.scala:1038:7
        pc <= _nextpc_io_nextpc;	// src/main/scala/Top.scala:1040:37, :1046:26
    end // always @(posedge)
    Control control (	// src/main/scala/Top.scala:1041:26
      .io_opcode       (instruction[6:0]),	// src/main/scala/Top.scala:1054:29, :1055:17, :1057:17, :1061:35
      .io_itype        (_control_io_itype),
      .io_aluop        (_control_io_aluop),
      .io_src1         (_control_io_src1),
      .io_src2         (_control_io_src2),
      .io_branch       (_control_io_branch),
      .io_jumptype     (_control_io_jumptype),
      .io_resultselect (_control_io_resultselect),
      .io_memop        (_control_io_memop),
      .io_toreg        (_control_io_toreg),
      .io_regwrite     (_control_io_regwrite),
      .io_wordinst     (_control_io_wordinst)
    );
    RegisterFile registers (	// src/main/scala/Top.scala:1042:26
      .clock        (clock),
      .io_readreg1  (instruction[19:15]),	// src/main/scala/Top.scala:1054:29, :1055:17, :1057:17, :1063:39
      .io_readreg2  (instruction[24:20]),	// src/main/scala/Top.scala:1054:29, :1055:17, :1057:17, :1064:39
      .io_writereg  (instruction[11:7]),	// src/main/scala/Top.scala:1054:29, :1055:17, :1057:17, :1065:39
      .io_writedata
        (_control_io_toreg
           ? io_dmem_readdata
           : _control_io_resultselect ? _immGen_io_sextImm : _alu_io_result),	// src/main/scala/Top.scala:1041:26, :1044:26, :1045:26, :1066:{32,72}
      .io_wen       ((|(instruction[11:7])) & _control_io_regwrite),	// src/main/scala/Top.scala:1041:26, :1054:29, :1055:17, :1057:17, :1065:39, :1067:{31,39}
      .io_readdata1 (_registers_io_readdata1),
      .io_readdata2 (_registers_io_readdata2)
    );
    ALUControl aluControl (	// src/main/scala/Top.scala:1043:26
      .io_aluop     (_control_io_aluop),	// src/main/scala/Top.scala:1041:26
      .io_itype     (_control_io_itype),	// src/main/scala/Top.scala:1041:26
      .io_funct7    (instruction[31:25]),	// src/main/scala/Top.scala:1054:29, :1055:17, :1057:17, :1085:38
      .io_funct3    (instruction[14:12]),	// src/main/scala/Top.scala:1054:29, :1055:17, :1057:17, :1059:27
      .io_wordinst  (_control_io_wordinst),	// src/main/scala/Top.scala:1041:26
      .io_operation (_aluControl_io_operation)
    );
    ALU alu (	// src/main/scala/Top.scala:1044:26
      .io_operation (_aluControl_io_operation),	// src/main/scala/Top.scala:1043:26
      .io_inputx    (_control_io_src1 ? pc : _registers_io_readdata1),	// src/main/scala/Top.scala:1040:37, :1041:26, :1042:26, :1090:23
      .io_inputy    (_alu_io_inputy_T_5),	// src/main/scala/chisel3/util/Mux.scala:126:16
      .io_result    (_alu_io_result)
    );
    ImmediateGenerator immGen (	// src/main/scala/Top.scala:1045:26
      .io_instruction ({32'h0, instruction}),	// src/main/scala/Top.scala:1054:29, :1055:17, :1057:17, :1073:25
      .io_sextImm     (_immGen_io_sextImm)
    );
    NextPC nextpc (	// src/main/scala/Top.scala:1046:26
      .io_branch   (_control_io_branch),	// src/main/scala/Top.scala:1041:26
      .io_jumptype (_control_io_jumptype),	// src/main/scala/Top.scala:1041:26
      .io_inputx   (_registers_io_readdata1),	// src/main/scala/Top.scala:1042:26
      .io_inputy   (_alu_io_inputy_T_5),	// src/main/scala/chisel3/util/Mux.scala:126:16
      .io_funct3   (instruction[14:12]),	// src/main/scala/Top.scala:1054:29, :1055:17, :1057:17, :1059:27
      .io_pc       (pc),	// src/main/scala/Top.scala:1040:37
      .io_imm      (_immGen_io_sextImm),	// src/main/scala/Top.scala:1045:26
      .io_nextpc   (_nextpc_io_nextpc)
    );
    assign io_imem_address = pc;	// src/main/scala/Top.scala:1038:7, :1040:37
    assign io_imem_valid = 1'h1;	// src/main/scala/Top.scala:1038:7, src/main/scala/chisel3/util/Counter.scala:118:16
    assign io_dmem_address = _alu_io_result;	// src/main/scala/Top.scala:1038:7, :1044:26
    assign io_dmem_valid = _control_io_memop[1];	// src/main/scala/Top.scala:1038:7, :1041:26, :1098:36
    assign io_dmem_writedata = _registers_io_readdata2;	// src/main/scala/Top.scala:1038:7, :1042:26
    assign io_dmem_memread = ~(_control_io_memop[0]);	// src/main/scala/Top.scala:1038:7, :1041:26, :1096:{22,39}
    assign io_dmem_memwrite = _control_io_memop[0];	// src/main/scala/Top.scala:1038:7, :1041:26, :1096:39
    assign io_dmem_maskmode = instruction[13:12];	// src/main/scala/Top.scala:1038:7, :1054:29, :1055:17, :1057:17, :1059:27, :1099:29
    assign io_dmem_sext = ~(instruction[14]);	// src/main/scala/Top.scala:1038:7, :1054:29, :1055:17, :1057:17, :1059:27, :1100:{19,26}
  endmodule
  
  // VCS coverage exclude_file
  module memory_16384x32(	// src/main/scala/Top.scala:314:19
    input  [13:0] R0_addr,
    input         R0_en,
                  R0_clk,
    output [31:0] R0_data,
    input  [13:0] R1_addr,
    input         R1_en,
                  R1_clk,
    output [31:0] R1_data,
    input  [13:0] R2_addr,
    input         R2_en,
                  R2_clk,
    output [31:0] R2_data,
    input  [13:0] R3_addr,
    input         R3_en,
                  R3_clk,
    output [31:0] R3_data,
    input  [13:0] W0_addr,
    input         W0_en,
                  W0_clk,
    input  [31:0] W0_data,
    input  [13:0] W1_addr,
    input         W1_en,
                  W1_clk,
    input  [31:0] W1_data
  );
  
    reg [31:0] Memory[0:16383];	// src/main/scala/Top.scala:314:19
    always @(posedge W0_clk) begin	// src/main/scala/Top.scala:314:19
      if (W0_en & 1'h1)	// src/main/scala/Top.scala:314:19
        Memory[W0_addr] <= W0_data;	// src/main/scala/Top.scala:314:19
      if (W1_en & 1'h1)	// src/main/scala/Top.scala:314:19
        Memory[W1_addr] <= W1_data;	// src/main/scala/Top.scala:314:19
    end // always @(posedge)
    assign R0_data = R0_en ? Memory[R0_addr] : 32'bx;	// src/main/scala/Top.scala:314:19
    assign R1_data = R1_en ? Memory[R1_addr] : 32'bx;	// src/main/scala/Top.scala:314:19
    assign R2_data = R2_en ? Memory[R2_addr] : 32'bx;	// src/main/scala/Top.scala:314:19
    assign R3_data = R3_en ? Memory[R3_addr] : 32'bx;	// src/main/scala/Top.scala:314:19
  endmodule
  
  module DualPortedCombinMemory(	// src/main/scala/Top.scala:1457:7
    input         clock,	// src/main/scala/Top.scala:1457:7
                  reset,	// src/main/scala/Top.scala:1457:7
                  io_imem_request_valid,	// src/main/scala/Top.scala:298:14
    input  [63:0] io_imem_request_bits_address,	// src/main/scala/Top.scala:298:14
    output [63:0] io_imem_response_bits_data,	// src/main/scala/Top.scala:298:14
    input         io_dmem_request_valid,	// src/main/scala/Top.scala:298:14
    input  [63:0] io_dmem_request_bits_address,	// src/main/scala/Top.scala:298:14
                  io_dmem_request_bits_writedata,	// src/main/scala/Top.scala:298:14
    input  [1:0]  io_dmem_request_bits_operation,	// src/main/scala/Top.scala:298:14
    output        io_dmem_response_valid,	// src/main/scala/Top.scala:298:14
    output [63:0] io_dmem_response_bits_data	// src/main/scala/Top.scala:298:14
  );
  
    wire [31:0] _memory_ext_R0_data;	// src/main/scala/Top.scala:314:19
    wire [31:0] _memory_ext_R1_data;	// src/main/scala/Top.scala:314:19
    wire [31:0] _memory_ext_R2_data;	// src/main/scala/Top.scala:314:19
    wire [31:0] _memory_ext_R3_data;	// src/main/scala/Top.scala:314:19
    wire        _GEN = io_imem_request_bits_address < 64'h10000;	// src/main/scala/Top.scala:1478:27
    wire        _GEN_0 = io_imem_request_valid & _GEN;	// src/main/scala/Top.scala:314:19, :1468:32, :1478:{27,37}
    `ifndef SYNTHESIS	// src/main/scala/Top.scala:1500:12
      wire _GEN_1 = io_dmem_request_valid & ~reset;	// src/main/scala/Top.scala:1500:12
      always @(posedge clock) begin	// src/main/scala/Top.scala:1500:12
        if (_GEN_1 & io_dmem_request_bits_operation == 2'h1) begin	// src/main/scala/Top.scala:1500:{12,31}
          if (`ASSERT_VERBOSE_COND_)	// src/main/scala/Top.scala:1500:12
            $error("Assertion failed\n    at Top.scala:1500 assert (request.operation =/= MemoryOperation.Write)\n");	// src/main/scala/Top.scala:1500:12
          if (`STOP_COND_)	// src/main/scala/Top.scala:1500:12
            $fatal;	// src/main/scala/Top.scala:1500:12
        end
        if (_GEN_1 & (|(io_dmem_request_bits_address[63:16]))) begin	// src/main/scala/Top.scala:1500:12, :1502:{12,29}
          if (`ASSERT_VERBOSE_COND_)	// src/main/scala/Top.scala:1502:12
            $error("Assertion failed\n    at Top.scala:1502 assert (request.address < size.U)\n");	// src/main/scala/Top.scala:1502:12
          if (`STOP_COND_)	// src/main/scala/Top.scala:1502:12
            $fatal;	// src/main/scala/Top.scala:1502:12
        end
      end // always @(posedge)
    `endif // not def SYNTHESIS
    wire [13:0] _io_dmem_response_bits_data_T_2 =
      io_dmem_request_bits_address[15:2] + 14'h1;	// src/main/scala/Top.scala:1481:60, :1505:34, :1506:58
    wire        _GEN_2 = io_dmem_request_valid & io_dmem_request_bits_operation == 2'h2;	// src/main/scala/Top.scala:314:19, :1496:32, :1505:34, :1510:{29,60}
    memory_16384x32 memory_ext (	// src/main/scala/Top.scala:314:19
      .R0_addr ({io_imem_request_bits_address[15:3], 1'h0}),	// src/main/scala/Top.scala:1457:7, :1481:{60,74}
      .R0_en   (_GEN_0),	// src/main/scala/Top.scala:314:19, :1468:32, :1478:37
      .R0_clk  (clock),
      .R0_data (_memory_ext_R0_data),
      .R1_addr ({io_imem_request_bits_address[15:3], 1'h0} + 14'h1),	// src/main/scala/Top.scala:1457:7, :1481:60
      .R1_en   (_GEN_0),	// src/main/scala/Top.scala:314:19, :1468:32, :1478:37
      .R1_clk  (clock),
      .R1_data (_memory_ext_R1_data),
      .R2_addr (io_dmem_request_bits_address[15:2]),	// src/main/scala/Top.scala:1506:72
      .R2_en   (io_dmem_request_valid),
      .R2_clk  (clock),
      .R2_data (_memory_ext_R2_data),
      .R3_addr (_io_dmem_response_bits_data_T_2),	// src/main/scala/Top.scala:1505:34, :1506:58
      .R3_en   (io_dmem_request_valid),
      .R3_clk  (clock),
      .R3_data (_memory_ext_R3_data),
      .W0_addr (_io_dmem_response_bits_data_T_2),	// src/main/scala/Top.scala:1505:34, :1506:58
      .W0_en   (_GEN_2),	// src/main/scala/Top.scala:314:19, :1496:32, :1510:60
      .W0_clk  (clock),
      .W0_data (io_dmem_request_bits_writedata[63:32]),	// src/main/scala/Top.scala:1512:54
      .W1_addr (io_dmem_request_bits_address[15:2]),	// src/main/scala/Top.scala:1505:34, :1506:58
      .W1_en   (_GEN_2),	// src/main/scala/Top.scala:314:19, :1496:32, :1510:60
      .W1_clk  (clock),
      .W1_data (io_dmem_request_bits_writedata[31:0])	// src/main/scala/Top.scala:1511:46
    );
    assign io_imem_response_bits_data =
      io_imem_request_valid & _GEN ? {_memory_ext_R1_data, _memory_ext_R0_data} : 64'h0;	// src/main/scala/Top.scala:311:{20,35}, :314:19, :1457:7, :1468:32, :1478:{27,37}, :1481:{34,40}
    assign io_dmem_response_valid = io_dmem_request_valid;	// src/main/scala/Top.scala:1457:7
    assign io_dmem_response_bits_data =
      io_dmem_request_valid ? {_memory_ext_R3_data, _memory_ext_R2_data} : 64'h0;	// src/main/scala/Top.scala:311:35, :312:20, :314:19, :1457:7, :1496:32, :1506:{32,38}
  endmodule
  
  module ICombinMemPort(	// src/main/scala/Top.scala:640:7
    input  [63:0] io_pipeline_address,	// src/main/scala/Top.scala:328:15
    input         io_pipeline_valid,	// src/main/scala/Top.scala:328:15
    output [63:0] io_pipeline_instruction,	// src/main/scala/Top.scala:328:15
    output        io_bus_request_valid,	// src/main/scala/Top.scala:328:15
    output [63:0] io_bus_request_bits_address,	// src/main/scala/Top.scala:328:15
    input  [63:0] io_bus_response_bits_data	// src/main/scala/Top.scala:328:15
  );
  
    assign io_pipeline_instruction = io_bus_response_bits_data;	// src/main/scala/Top.scala:640:7
    assign io_bus_request_valid = io_pipeline_valid;	// src/main/scala/Top.scala:640:7
    assign io_bus_request_bits_address = io_pipeline_address;	// src/main/scala/Top.scala:640:7
  endmodule
  
  module DCombinMemPort(	// src/main/scala/Top.scala:667:7
    input         clock,	// src/main/scala/Top.scala:667:7
                  reset,	// src/main/scala/Top.scala:667:7
    input  [63:0] io_pipeline_address,	// src/main/scala/Top.scala:345:15
    input         io_pipeline_valid,	// src/main/scala/Top.scala:345:15
    input  [63:0] io_pipeline_writedata,	// src/main/scala/Top.scala:345:15
    input         io_pipeline_memread,	// src/main/scala/Top.scala:345:15
                  io_pipeline_memwrite,	// src/main/scala/Top.scala:345:15
    input  [1:0]  io_pipeline_maskmode,	// src/main/scala/Top.scala:345:15
    input         io_pipeline_sext,	// src/main/scala/Top.scala:345:15
    output [63:0] io_pipeline_readdata,	// src/main/scala/Top.scala:345:15
    output        io_bus_request_valid,	// src/main/scala/Top.scala:345:15
    output [63:0] io_bus_request_bits_address,	// src/main/scala/Top.scala:345:15
                  io_bus_request_bits_writedata,	// src/main/scala/Top.scala:345:15
    output [1:0]  io_bus_request_bits_operation,	// src/main/scala/Top.scala:345:15
    input         io_bus_response_valid,	// src/main/scala/Top.scala:345:15
    input  [63:0] io_bus_response_bits_data	// src/main/scala/Top.scala:345:15
  );
  
    wire         io_bus_request_valid_0 =
      io_pipeline_valid & (io_pipeline_memread | io_pipeline_memwrite);	// src/main/scala/Top.scala:670:{27,51}
    `ifndef SYNTHESIS	// src/main/scala/Top.scala:672:11
      always @(posedge clock) begin	// src/main/scala/Top.scala:672:11
        if (io_bus_request_valid_0 & ~reset & io_pipeline_memread
            & io_pipeline_memwrite) begin	// src/main/scala/Top.scala:670:27, :672:11
          if (`ASSERT_VERBOSE_COND_)	// src/main/scala/Top.scala:672:11
            $error("Assertion failed\n    at Top.scala:672 assert(!(io.pipeline.memread && io.pipeline.memwrite))\n");	// src/main/scala/Top.scala:672:11
          if (`STOP_COND_)	// src/main/scala/Top.scala:672:11
            $fatal;	// src/main/scala/Top.scala:672:11
        end
      end // always @(posedge)
    `endif // not def SYNTHESIS
    reg  [63:0]  casez_tmp;	// src/main/scala/Top.scala:714:45, :715:26, :716:52
    always_comb begin	// src/main/scala/Top.scala:714:{36,45}, :715:26, :716:{43,52}, :717:26, :718:{43,52}, :719:26, :721:26
      casez (io_pipeline_maskmode)	// src/main/scala/Top.scala:714:{36,45}, :715:26, :716:{43,52}, :717:26, :718:{43,52}, :719:26, :721:26
        2'b00:
          casez_tmp = 64'hFF;	// src/main/scala/Top.scala:714:{36,45}, :715:26, :716:{43,52}, :717:26, :718:{43,52}, :719:26, :721:26
        2'b01:
          casez_tmp = 64'hFFFF;	// src/main/scala/Top.scala:714:{36,45}, :715:26, :716:{43,52}, :717:26, :718:{43,52}, :719:26, :721:26
        2'b10:
          casez_tmp = 64'hFFFFFFFF;	// src/main/scala/Top.scala:714:{36,45}, :715:26, :716:{43,52}, :717:26, :718:{43,52}, :719:26, :721:26
        default:
          casez_tmp = 64'hFFFFFFFFFFFFFFFF;	// src/main/scala/Top.scala:714:{36,45}, :715:26, :716:{43,52}, :717:26, :718:{43,52}, :719:26, :721:26
      endcase	// src/main/scala/Top.scala:714:{36,45}, :715:26, :716:{43,52}, :717:26, :718:{43,52}, :719:26, :721:26
    end // always_comb
    wire [126:0] _GEN = {122'h0, io_pipeline_address[1:0], 3'h0};	// src/main/scala/Top.scala:705:41, :724:{50,61}
    wire [126:0] _writedata_mask_shifted_T_1 = {63'h0, casez_tmp} << _GEN;	// src/main/scala/Top.scala:714:45, :715:26, :716:52, :724:50
    wire [126:0] _writedata_shifted_T_1 = {63'h0, io_pipeline_writedata} << _GEN;	// src/main/scala/Top.scala:724:50, :725:52
    reg  [63:0]  casez_tmp_0;	// src/main/scala/Top.scala:742:43, :744:23, :745:50
    wire [63:0]  _GEN_0 = {59'h0, io_pipeline_address[1:0], 3'h0};	// src/main/scala/Top.scala:724:61, :741:39, :744:53
    wire [63:0]  _readdata_mask_T_2 = io_bus_response_bits_data >> _GEN_0;	// src/main/scala/Top.scala:744:53
    wire [63:0]  _readdata_mask_T_5 = io_bus_response_bits_data >> _GEN_0;	// src/main/scala/Top.scala:744:53, :747:53
    wire [63:0]  _readdata_mask_T_8 = io_bus_response_bits_data >> _GEN_0;	// src/main/scala/Top.scala:744:53, :750:53
    always_comb begin	// src/main/scala/Top.scala:714:36, :716:43, :718:43, :742:43, :744:23, :745:50, :747:23, :748:50, :750:23, :753:23
      casez (io_pipeline_maskmode)	// src/main/scala/Top.scala:714:36, :716:43, :718:43, :742:43, :744:23, :745:50, :747:23, :748:50, :750:23, :753:23
        2'b00:
          casez_tmp_0 = {56'h0, _readdata_mask_T_2[7:0]};	// src/main/scala/Top.scala:714:36, :715:37, :716:43, :718:43, :742:43, :744:{23,53,72}, :745:50, :747:23, :748:50, :750:23, :753:23
        2'b01:
          casez_tmp_0 = {48'h0, _readdata_mask_T_5[15:0]};	// src/main/scala/Top.scala:714:36, :716:43, :717:37, :718:43, :742:43, :744:23, :745:50, :747:{23,53,72}, :748:50, :750:23, :753:23
        2'b10:
          casez_tmp_0 = {32'h0, _readdata_mask_T_8[31:0]};	// src/main/scala/Top.scala:714:36, :716:43, :718:43, :719:37, :742:43, :744:23, :745:50, :747:23, :748:50, :750:{23,53,72}, :753:23
        default:
          casez_tmp_0 = io_bus_response_bits_data;	// src/main/scala/Top.scala:714:36, :716:43, :718:43, :742:43, :744:23, :745:50, :747:23, :748:50, :750:23, :753:23
      endcase	// src/main/scala/Top.scala:714:36, :716:43, :718:43, :742:43, :744:23, :745:50, :747:23, :748:50, :750:23, :753:23
    end // always_comb
    reg  [63:0]  casez_tmp_1;	// src/main/scala/Top.scala:757:45, :759:30, :760:52
    always_comb begin	// src/main/scala/Top.scala:714:36, :716:43, :718:43, :757:45, :759:30, :760:52, :762:30, :763:52, :765:30, :768:30
      casez (io_pipeline_maskmode)	// src/main/scala/Top.scala:714:36, :716:43, :718:43, :757:45, :759:30, :760:52, :762:30, :763:52, :765:30, :768:30
        2'b00:
          casez_tmp_1 = {{56{casez_tmp_0[7]}}, casez_tmp_0[7:0]};	// src/main/scala/Top.scala:714:36, :716:43, :718:43, :742:43, :744:23, :745:50, :757:45, :759:{30,36,41,59,79}, :760:52, :762:30, :763:52, :765:30, :768:30
        2'b01:
          casez_tmp_1 = {{48{casez_tmp_0[15]}}, casez_tmp_0[15:0]};	// src/main/scala/Top.scala:714:36, :716:43, :718:43, :742:43, :744:23, :745:50, :757:45, :759:30, :760:52, :762:{30,36,41,59,79}, :763:52, :765:30, :768:30
        2'b10:
          casez_tmp_1 = {{32{casez_tmp_0[31]}}, casez_tmp_0[31:0]};	// src/main/scala/Top.scala:714:36, :716:43, :718:43, :742:43, :744:23, :745:50, :757:45, :759:30, :760:52, :762:30, :763:52, :765:{30,36,41,59,79}, :768:30
        default:
          casez_tmp_1 = casez_tmp_0;	// src/main/scala/Top.scala:714:36, :716:43, :718:43, :742:43, :744:23, :745:50, :757:45, :759:30, :760:52, :762:30, :763:52, :765:30, :768:30
      endcase	// src/main/scala/Top.scala:714:36, :716:43, :718:43, :757:45, :759:30, :760:52, :762:30, :763:52, :765:30, :768:30
    end // always_comb
    assign io_pipeline_readdata =
      ~io_bus_response_valid | io_pipeline_memwrite | ~io_pipeline_memread
        ? 64'h0
        : io_pipeline_sext ? casez_tmp_1 : casez_tmp_0;	// src/main/scala/Top.scala:350:{15,31}, :667:7, :697:32, :698:33, :736:39, :742:43, :744:23, :745:50, :756:31, :757:45, :759:30, :760:52, :771:28
    assign io_bus_request_valid = io_bus_request_valid_0;	// src/main/scala/Top.scala:667:7, :670:27
    assign io_bus_request_bits_address = io_pipeline_address;	// src/main/scala/Top.scala:667:7
    assign io_bus_request_bits_writedata =
      io_pipeline_maskmode != 2'h3
        ? io_bus_response_bits_data & ~(_writedata_mask_shifted_T_1[63:0])
          | _writedata_shifted_T_1[63:0] & _writedata_mask_shifted_T_1[63:0]
        : io_pipeline_writedata;	// src/main/scala/Top.scala:667:7, :703:{34,43}, :724:{32,50}, :725:{27,52}, :728:26, :730:{19,32,49,70}, :732:19
    assign io_bus_request_bits_operation = {io_pipeline_memwrite, 1'h0};	// src/main/scala/Top.scala:667:7, :677:33, :686:37, :689:37
  endmodule
  
  module Top(	// src/main/scala/Top.scala:260:7
    input  clock,	// src/main/scala/Top.scala:260:7
           reset,	// src/main/scala/Top.scala:260:7
    output io_success	// src/main/scala/Top.scala:262:14
  );
  
    wire [63:0] _dmem_io_pipeline_readdata;	// src/main/scala/Top.scala:272:20
    wire        _dmem_io_bus_request_valid;	// src/main/scala/Top.scala:272:20
    wire [63:0] _dmem_io_bus_request_bits_address;	// src/main/scala/Top.scala:272:20
    wire [63:0] _dmem_io_bus_request_bits_writedata;	// src/main/scala/Top.scala:272:20
    wire [1:0]  _dmem_io_bus_request_bits_operation;	// src/main/scala/Top.scala:272:20
    wire [63:0] _imem_io_pipeline_instruction;	// src/main/scala/Top.scala:271:20
    wire        _imem_io_bus_request_valid;	// src/main/scala/Top.scala:271:20
    wire [63:0] _imem_io_bus_request_bits_address;	// src/main/scala/Top.scala:271:20
    wire [63:0] _mem_io_imem_response_bits_data;	// src/main/scala/Top.scala:269:20
    wire        _mem_io_dmem_response_valid;	// src/main/scala/Top.scala:269:20
    wire [63:0] _mem_io_dmem_response_bits_data;	// src/main/scala/Top.scala:269:20
    wire [63:0] _cpu_io_imem_address;	// src/main/scala/Top.scala:268:20
    wire        _cpu_io_imem_valid;	// src/main/scala/Top.scala:268:20
    wire [63:0] _cpu_io_dmem_address;	// src/main/scala/Top.scala:268:20
    wire        _cpu_io_dmem_valid;	// src/main/scala/Top.scala:268:20
    wire [63:0] _cpu_io_dmem_writedata;	// src/main/scala/Top.scala:268:20
    wire        _cpu_io_dmem_memread;	// src/main/scala/Top.scala:268:20
    wire        _cpu_io_dmem_memwrite;	// src/main/scala/Top.scala:268:20
    wire [1:0]  _cpu_io_dmem_maskmode;	// src/main/scala/Top.scala:268:20
    wire        _cpu_io_dmem_sext;	// src/main/scala/Top.scala:268:20
    SingleCycleCPU cpu (	// src/main/scala/Top.scala:268:20
      .clock               (clock),
      .reset               (reset),
      .io_imem_address     (_cpu_io_imem_address),
      .io_imem_valid       (_cpu_io_imem_valid),
      .io_imem_good        (1'h1),	// src/main/scala/Top.scala:268:20, :269:20, :271:20, :272:20
      .io_imem_instruction (_imem_io_pipeline_instruction),	// src/main/scala/Top.scala:271:20
      .io_imem_ready       (1'h1),	// src/main/scala/Top.scala:268:20, :269:20, :271:20, :272:20
      .io_dmem_address     (_cpu_io_dmem_address),
      .io_dmem_valid       (_cpu_io_dmem_valid),
      .io_dmem_good        (1'h1),	// src/main/scala/Top.scala:268:20, :269:20, :271:20, :272:20
      .io_dmem_writedata   (_cpu_io_dmem_writedata),
      .io_dmem_memread     (_cpu_io_dmem_memread),
      .io_dmem_memwrite    (_cpu_io_dmem_memwrite),
      .io_dmem_maskmode    (_cpu_io_dmem_maskmode),
      .io_dmem_sext        (_cpu_io_dmem_sext),
      .io_dmem_readdata    (_dmem_io_pipeline_readdata)	// src/main/scala/Top.scala:272:20
    );
    DualPortedCombinMemory mem (	// src/main/scala/Top.scala:269:20
      .clock                          (clock),
      .reset                          (reset),
      .io_imem_request_valid          (_imem_io_bus_request_valid),	// src/main/scala/Top.scala:271:20
      .io_imem_request_bits_address   (_imem_io_bus_request_bits_address),	// src/main/scala/Top.scala:271:20
      .io_imem_response_bits_data     (_mem_io_imem_response_bits_data),
      .io_dmem_request_valid          (_dmem_io_bus_request_valid),	// src/main/scala/Top.scala:272:20
      .io_dmem_request_bits_address   (_dmem_io_bus_request_bits_address),	// src/main/scala/Top.scala:272:20
      .io_dmem_request_bits_writedata (_dmem_io_bus_request_bits_writedata),	// src/main/scala/Top.scala:272:20
      .io_dmem_request_bits_operation (_dmem_io_bus_request_bits_operation),	// src/main/scala/Top.scala:272:20
      .io_dmem_response_valid         (_mem_io_dmem_response_valid),
      .io_dmem_response_bits_data     (_mem_io_dmem_response_bits_data)
    );
    ICombinMemPort imem (	// src/main/scala/Top.scala:271:20
      .io_pipeline_address         (_cpu_io_imem_address),	// src/main/scala/Top.scala:268:20
      .io_pipeline_valid           (_cpu_io_imem_valid),	// src/main/scala/Top.scala:268:20
      .io_pipeline_instruction     (_imem_io_pipeline_instruction),
      .io_bus_request_valid        (_imem_io_bus_request_valid),
      .io_bus_request_bits_address (_imem_io_bus_request_bits_address),
      .io_bus_response_bits_data   (_mem_io_imem_response_bits_data)	// src/main/scala/Top.scala:269:20
    );
    DCombinMemPort dmem (	// src/main/scala/Top.scala:272:20
      .clock                         (clock),
      .reset                         (reset),
      .io_pipeline_address           (_cpu_io_dmem_address),	// src/main/scala/Top.scala:268:20
      .io_pipeline_valid             (_cpu_io_dmem_valid),	// src/main/scala/Top.scala:268:20
      .io_pipeline_writedata         (_cpu_io_dmem_writedata),	// src/main/scala/Top.scala:268:20
      .io_pipeline_memread           (_cpu_io_dmem_memread),	// src/main/scala/Top.scala:268:20
      .io_pipeline_memwrite          (_cpu_io_dmem_memwrite),	// src/main/scala/Top.scala:268:20
      .io_pipeline_maskmode          (_cpu_io_dmem_maskmode),	// src/main/scala/Top.scala:268:20
      .io_pipeline_sext              (_cpu_io_dmem_sext),	// src/main/scala/Top.scala:268:20
      .io_pipeline_readdata          (_dmem_io_pipeline_readdata),
      .io_bus_request_valid          (_dmem_io_bus_request_valid),
      .io_bus_request_bits_address   (_dmem_io_bus_request_bits_address),
      .io_bus_request_bits_writedata (_dmem_io_bus_request_bits_writedata),
      .io_bus_request_bits_operation (_dmem_io_bus_request_bits_operation),
      .io_bus_response_valid         (_mem_io_dmem_response_valid),	// src/main/scala/Top.scala:269:20
      .io_bus_response_bits_data     (_mem_io_dmem_response_bits_data)	// src/main/scala/Top.scala:269:20
    );
    assign io_success = 1'h0;	// src/main/scala/Top.scala:260:7, :266:14
  endmodule
  
verilog_fixed: |
  // Generated by CIRCT firtool-1.62.0
  // Standard header to adapt well known macros for prints and assertions.
  
  // Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
  `ifndef ASSERT_VERBOSE_COND_
    `ifdef ASSERT_VERBOSE_COND
      `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
    `else  // ASSERT_VERBOSE_COND
      `define ASSERT_VERBOSE_COND_ 1
    `endif // ASSERT_VERBOSE_COND
  `endif // not def ASSERT_VERBOSE_COND_
  
  // Users can define 'STOP_COND' to add an extra gate to stop conditions.
  `ifndef STOP_COND_
    `ifdef STOP_COND
      `define STOP_COND_ (`STOP_COND)
    `else  // STOP_COND
      `define STOP_COND_ 1
    `endif // STOP_COND
  `endif // not def STOP_COND_
  
  module Control(	// src/main/scala/Top.scala:1156:7
    input  [6:0] io_opcode,	// src/main/scala/Top.scala:1157:14
    output       io_itype,	// src/main/scala/Top.scala:1157:14
                 io_aluop,	// src/main/scala/Top.scala:1157:14
                 io_src1,	// src/main/scala/Top.scala:1157:14
    output [1:0] io_src2,	// src/main/scala/Top.scala:1157:14
    output       io_branch,	// src/main/scala/Top.scala:1157:14
    output [1:0] io_jumptype,	// src/main/scala/Top.scala:1157:14
    output       io_resultselect,	// src/main/scala/Top.scala:1157:14
    output [1:0] io_memop,	// src/main/scala/Top.scala:1157:14
    output       io_toreg,	// src/main/scala/Top.scala:1157:14
                 io_regwrite,	// src/main/scala/Top.scala:1157:14
                 io_wordinst	// src/main/scala/Top.scala:1157:14
  );
  
    wire _signals_T_1 = io_opcode == 7'h33;	// src/main/scala/chisel3/util/Lookup.scala:31:38
    wire _signals_T_3 = io_opcode == 7'h13;	// src/main/scala/chisel3/util/Lookup.scala:31:38
    wire _signals_T_110 = io_opcode == 7'h3;	// src/main/scala/chisel3/util/Lookup.scala:31:38
    wire _signals_T_7 = io_opcode == 7'h23;	// src/main/scala/chisel3/util/Lookup.scala:31:38
    wire _signals_T_68 = io_opcode == 7'h63;	// src/main/scala/chisel3/util/Lookup.scala:31:38
    wire _signals_T_87 = io_opcode == 7'h37;	// src/main/scala/chisel3/util/Lookup.scala:31:38
    wire _signals_T_13 = io_opcode == 7'h17;	// src/main/scala/chisel3/util/Lookup.scala:31:38
    wire _signals_T_15 = io_opcode == 7'h6F;	// src/main/scala/chisel3/util/Lookup.scala:31:38
    wire _signals_T_44 = io_opcode == 7'h67;	// src/main/scala/chisel3/util/Lookup.scala:31:38
    wire _signals_T_53 = io_opcode == 7'h1B;	// src/main/scala/chisel3/util/Lookup.scala:31:38
    wire _signals_T_132 = io_opcode == 7'h3B;	// src/main/scala/chisel3/util/Lookup.scala:31:38
    wire _GEN = _signals_T_15 | _signals_T_44;	// src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    wire _GEN_0 =
      _signals_T_110 | _signals_T_7 | _signals_T_68 | _signals_T_87 | _signals_T_13 | _GEN;	// src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    wire _GEN_1 = _signals_T_1 | _signals_T_3;	// src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    wire _GEN_2 = _signals_T_68 | _signals_T_87;	// src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    wire _GEN_3 = _signals_T_3 | _signals_T_110 | _signals_T_7;	// src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    wire _GEN_4 = _signals_T_7 | _signals_T_68;	// src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    assign io_itype = ~_signals_T_1 & (_signals_T_3 | ~_GEN_0 & _signals_T_53);	// src/main/scala/Top.scala:1156:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    assign io_aluop = _GEN_1 | ~_GEN_0 & (_signals_T_53 | _signals_T_132);	// src/main/scala/Top.scala:1156:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    assign io_src1 =
      ~(_signals_T_1 | _signals_T_3 | _signals_T_110 | _signals_T_7 | _GEN_2)
      & (_signals_T_13 | _signals_T_15 | _signals_T_44);	// src/main/scala/Top.scala:1156:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    assign io_src2 =
      _signals_T_1
        ? 2'h0
        : _GEN_3
            ? 2'h1
            : _GEN_2 ? 2'h0 : _signals_T_13 ? 2'h1 : _GEN ? 2'h2 : {1'h0, _signals_T_53};	// src/main/scala/Top.scala:1156:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    assign io_branch = ~(_signals_T_1 | _GEN_3) & _signals_T_68;	// src/main/scala/Top.scala:1156:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    assign io_jumptype =
      _signals_T_1 | _signals_T_3 | _signals_T_110 | _signals_T_7 | _signals_T_68
      | _signals_T_87 | _signals_T_13
        ? 2'h1
        : _signals_T_15 ? 2'h2 : {2{_signals_T_44}};	// src/main/scala/Top.scala:1156:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    assign io_resultselect =
      ~(_signals_T_1 | _signals_T_3 | _signals_T_110 | _GEN_4) & _signals_T_87;	// src/main/scala/Top.scala:1156:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    assign io_memop = _GEN_1 ? 2'h0 : _signals_T_110 ? 2'h2 : {2{_signals_T_7}};	// src/main/scala/Top.scala:1156:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    assign io_toreg = ~_GEN_1 & _signals_T_110;	// src/main/scala/Top.scala:1156:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    assign io_regwrite =
      _signals_T_1 | _signals_T_3 | _signals_T_110 | ~_GEN_4
      & (_signals_T_87 | _signals_T_13 | _signals_T_15 | _signals_T_44 | _signals_T_53
         | _signals_T_132);	// src/main/scala/Top.scala:1156:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
    assign io_wordinst =
      ~(_signals_T_1 | _signals_T_3 | _GEN_0) & (_signals_T_53 | _signals_T_132);	// src/main/scala/Top.scala:1156:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39
  endmodule
  
  module RegisterFile(	// src/main/scala/Top.scala:896:7
    input         clock,	// src/main/scala/Top.scala:896:7
    input  [4:0]  io_readreg1,	// src/main/scala/Top.scala:897:14
                  io_readreg2,	// src/main/scala/Top.scala:897:14
                  io_writereg,	// src/main/scala/Top.scala:897:14
    input  [63:0] io_writedata,	// src/main/scala/Top.scala:897:14
    input         io_wen,	// src/main/scala/Top.scala:897:14
    output [63:0] io_readdata1,	// src/main/scala/Top.scala:897:14
                  io_readdata2	// src/main/scala/Top.scala:897:14
  );
  
    reg [63:0] regs_0;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_1;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_2;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_3;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_4;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_5;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_6;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_7;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_8;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_9;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_10;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_11;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_12;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_13;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_14;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_15;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_16;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_17;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_18;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_19;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_20;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_21;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_22;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_23;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_24;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_25;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_26;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_27;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_28;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_29;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_30;	// src/main/scala/Top.scala:912:17
    reg [63:0] regs_31;	// src/main/scala/Top.scala:912:17
    reg [63:0] casez_tmp;	// src/main/scala/Top.scala:921:16
    always_comb begin	// src/main/scala/Top.scala:921:16
      casez (io_readreg1)	// src/main/scala/Top.scala:921:16
        5'b00000:
          casez_tmp = regs_0;	// src/main/scala/Top.scala:912:17, :921:16
        5'b00001:
          casez_tmp = regs_1;	// src/main/scala/Top.scala:912:17, :921:16
        5'b00010:
          casez_tmp = regs_2;	// src/main/scala/Top.scala:912:17, :921:16
        5'b00011:
          casez_tmp = regs_3;	// src/main/scala/Top.scala:912:17, :921:16
        5'b00100:
          casez_tmp = regs_4;	// src/main/scala/Top.scala:912:17, :921:16
        5'b00101:
          casez_tmp = regs_5;	// src/main/scala/Top.scala:912:17, :921:16
        5'b00110:
          casez_tmp = regs_6;	// src/main/scala/Top.scala:912:17, :921:16
        5'b00111:
          casez_tmp = regs_7;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01000:
          casez_tmp = regs_8;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01001:
          casez_tmp = regs_9;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01010:
          casez_tmp = regs_10;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01011:
          casez_tmp = regs_11;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01100:
          casez_tmp = regs_12;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01101:
          casez_tmp = regs_13;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01110:
          casez_tmp = regs_14;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01111:
          casez_tmp = regs_15;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10000:
          casez_tmp = regs_16;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10001:
          casez_tmp = regs_17;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10010:
          casez_tmp = regs_18;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10011:
          casez_tmp = regs_19;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10100:
          casez_tmp = regs_20;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10101:
          casez_tmp = regs_21;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10110:
          casez_tmp = regs_22;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10111:
          casez_tmp = regs_23;	// src/main/scala/Top.scala:912:17, :921:16
        5'b11000:
          casez_tmp = regs_24;	// src/main/scala/Top.scala:912:17, :921:16
        5'b11001:
          casez_tmp = regs_25;	// src/main/scala/Top.scala:912:17, :921:16
        5'b11010:
          casez_tmp = regs_26;	// src/main/scala/Top.scala:912:17, :921:16
        5'b11011:
          casez_tmp = regs_27;	// src/main/scala/Top.scala:912:17, :921:16
        5'b11100:
          casez_tmp = regs_28;	// src/main/scala/Top.scala:912:17, :921:16
        5'b11101:
          casez_tmp = regs_29;	// src/main/scala/Top.scala:912:17, :921:16
        5'b11110:
          casez_tmp = regs_30;	// src/main/scala/Top.scala:912:17, :921:16
        default:
          casez_tmp = regs_31;	// src/main/scala/Top.scala:912:17, :921:16
      endcase	// src/main/scala/Top.scala:921:16
    end // always_comb
    reg [63:0] casez_tmp_0;	// src/main/scala/Top.scala:922:16
    always_comb begin	// src/main/scala/Top.scala:921:16
      casez (io_readreg2)	// src/main/scala/Top.scala:921:16
        5'b00000:
          casez_tmp_0 = regs_0;	// src/main/scala/Top.scala:912:17, :921:16
        5'b00001:
          casez_tmp_0 = regs_1;	// src/main/scala/Top.scala:912:17, :921:16
        5'b00010:
          casez_tmp_0 = regs_2;	// src/main/scala/Top.scala:912:17, :921:16
        5'b00011:
          casez_tmp_0 = regs_3;	// src/main/scala/Top.scala:912:17, :921:16
        5'b00100:
          casez_tmp_0 = regs_4;	// src/main/scala/Top.scala:912:17, :921:16
        5'b00101:
          casez_tmp_0 = regs_5;	// src/main/scala/Top.scala:912:17, :921:16
        5'b00110:
          casez_tmp_0 = regs_6;	// src/main/scala/Top.scala:912:17, :921:16
        5'b00111:
          casez_tmp_0 = regs_7;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01000:
          casez_tmp_0 = regs_8;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01001:
          casez_tmp_0 = regs_9;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01010:
          casez_tmp_0 = regs_10;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01011:
          casez_tmp_0 = regs_11;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01100:
          casez_tmp_0 = regs_12;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01101:
          casez_tmp_0 = regs_13;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01110:
          casez_tmp_0 = regs_14;	// src/main/scala/Top.scala:912:17, :921:16
        5'b01111:
          casez_tmp_0 = regs_15;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10000:
          casez_tmp_0 = regs_16;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10001:
          casez_tmp_0 = regs_17;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10010:
          casez_tmp_0 = regs_18;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10011:
          casez_tmp_0 = regs_19;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10100:
          casez_tmp_0 = regs_20;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10101:
          casez_tmp_0 = regs_21;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10110:
          casez_tmp_0 = regs_22;	// src/main/scala/Top.scala:912:17, :921:16
        5'b10111:
          casez_tmp_0 = regs_23;	// src/main/scala/Top.scala:912:17, :921:16
        5'b11000:
          casez_tmp_0 = regs_24;	// src/main/scala/Top.scala:912:17, :921:16
        5'b11001:
          casez_tmp_0 = regs_25;	// src/main/scala/Top.scala:912:17, :921:16
        5'b11010:
          casez_tmp_0 = regs_26;	// src/main/scala/Top.scala:912:17, :921:16
        5'b11011:
          casez_tmp_0 = regs_27;	// src/main/scala/Top.scala:912:17, :921:16
        5'b11100:
          casez_tmp_0 = regs_28;	// src/main/scala/Top.scala:912:17, :921:16
        5'b11101:
          casez_tmp_0 = regs_29;	// src/main/scala/Top.scala:912:17, :921:16
        5'b11110:
          casez_tmp_0 = regs_30;	// src/main/scala/Top.scala:912:17, :921:16
        default:
          casez_tmp_0 = regs_31;	// src/main/scala/Top.scala:912:17, :921:16
      endcase	// src/main/scala/Top.scala:921:16
    end // always_comb
    always @(posedge clock) begin	// src/main/scala/Top.scala:896:7
      if (io_wen & io_writereg == 5'h0)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_0 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h1)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_1 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h2)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_2 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h3)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_3 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h4)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_4 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h5)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_5 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h6)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_6 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h7)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_7 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h8)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_8 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h9)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_9 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'hA)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_10 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'hB)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_11 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'hC)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_12 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'hD)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_13 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'hE)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_14 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'hF)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_15 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h10)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_16 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h11)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_17 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h12)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_18 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h13)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_19 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h14)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_20 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h15)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_21 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h16)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_22 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h17)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_23 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h18)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_24 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h19)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_25 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h1A)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_26 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h1B)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_27 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h1C)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_28 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h1D)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_29 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & io_writereg == 5'h1E)	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_30 <= io_writedata;	// src/main/scala/Top.scala:912:17
      if (io_wen & (&io_writereg))	// src/main/scala/Top.scala:912:17, :915:17, :916:23
        regs_31 <= io_writedata;	// src/main/scala/Top.scala:912:17
    end // always @(posedge)
    assign io_readdata1 = casez_tmp;	// src/main/scala/Top.scala:896:7, :921:16
    assign io_readdata2 = casez_tmp_0;	// src/main/scala/Top.scala:896:7, :922:16
  endmodule
  
  module ALUControl(	// src/main/scala/Top.scala:1327:7
    input        io_aluop,	// src/main/scala/Top.scala:1328:14
                 io_itype,	// src/main/scala/Top.scala:1328:14
    input  [6:0] io_funct7,	// src/main/scala/Top.scala:1328:14
    input  [2:0] io_funct3,	// src/main/scala/Top.scala:1328:14
    input        io_wordinst,	// src/main/scala/Top.scala:1328:14
    output [4:0] io_operation	// src/main/scala/Top.scala:1328:14
  );
  
    reg [4:0] casez_tmp;	// src/main/scala/Top.scala:1341:35, :1342:52, :1357:42
    always_comb begin	// src/main/scala/Top.scala:1341:{21,35}, :1342:52, :1357:{28,42}, :1358:26, :1363:{28,42}, :1364:20, :1365:{28,42}, :1366:20, :1367:{28,42}, :1368:20, :1369:{28,42}, :1370:45, :1385:{28,42}, :1386:20, :1388:20
      casez (io_funct3)	// src/main/scala/Top.scala:1341:{21,35}, :1342:52, :1357:{28,42}, :1358:26, :1363:{28,42}, :1364:20, :1365:{28,42}, :1366:20, :1367:{28,42}, :1368:20, :1369:{28,42}, :1370:45, :1385:{28,42}, :1386:20, :1388:20
        3'b000:
          casez_tmp =
            io_itype | io_funct7 == 7'h0
              ? {io_wordinst, 4'h7}
              : io_funct7 == 7'h20 ? {io_wordinst, 4'h4} : 5'h1F;	// src/main/scala/Top.scala:1341:{21,35}, :1342:{22,34,52}, :1343:28, :1344:24, :1346:24, :1348:{30,48}, :1349:36, :1350:24, :1352:24, :1355:22, :1357:{28,42}, :1358:26, :1363:{28,42}, :1364:20, :1365:{28,42}, :1366:20, :1367:{28,42}, :1368:20, :1369:{28,42}, :1370:45, :1385:{28,42}, :1386:20, :1388:20
        3'b001:
          casez_tmp = {io_wordinst, 4'h8};	// src/main/scala/Top.scala:1341:{21,35}, :1342:52, :1357:{28,42}, :1358:26, :1359:22, :1361:22, :1363:{28,42}, :1364:20, :1365:{28,42}, :1366:20, :1367:{28,42}, :1368:20, :1369:{28,42}, :1370:45, :1385:{28,42}, :1386:20, :1388:20
        3'b010:
          casez_tmp = 5'h9;	// src/main/scala/Top.scala:1341:{21,35}, :1342:52, :1357:{28,42}, :1358:26, :1363:{28,42}, :1364:20, :1365:{28,42}, :1366:20, :1367:{28,42}, :1368:20, :1369:{28,42}, :1370:45, :1385:{28,42}, :1386:20, :1388:20
        3'b011:
          casez_tmp = 5'h1;	// src/main/scala/Top.scala:1341:{21,35}, :1342:52, :1357:{28,42}, :1358:26, :1363:{28,42}, :1364:20, :1365:{28,42}, :1366:20, :1367:{28,42}, :1368:20, :1369:{28,42}, :1370:45, :1385:{28,42}, :1386:20, :1388:20
        3'b100:
          casez_tmp = 5'h0;	// src/main/scala/Top.scala:1341:{21,35}, :1342:52, :1357:{28,42}, :1358:26, :1363:{28,42}, :1364:20, :1365:{28,42}, :1366:20, :1367:{28,42}, :1368:20, :1369:{28,42}, :1370:45, :1385:{28,42}, :1386:20, :1388:20
        3'b101:
          casez_tmp =
            io_funct7[6:1] == 6'h0
              ? {io_wordinst, 4'h2}
              : io_funct7[6:1] == 6'h10 ? {io_wordinst, 4'h3} : 5'h1F;	// src/main/scala/Top.scala:1341:{21,35}, :1342:52, :1355:22, :1357:{28,42}, :1358:26, :1363:{28,42}, :1364:20, :1365:{28,42}, :1366:20, :1367:{28,42}, :1368:20, :1369:{28,42}, :1370:{22,28,45}, :1371:28, :1372:24, :1374:24, :1376:{35,52}, :1377:28, :1378:24, :1380:24, :1383:22, :1385:{28,42}, :1386:20, :1388:20
        3'b110:
          casez_tmp = 5'h5;	// src/main/scala/Top.scala:1341:{21,35}, :1342:52, :1357:{28,42}, :1358:26, :1363:{28,42}, :1364:20, :1365:{28,42}, :1366:20, :1367:{28,42}, :1368:20, :1369:{28,42}, :1370:45, :1385:{28,42}, :1386:20, :1388:20
        default:
          casez_tmp = 5'h6;	// src/main/scala/Top.scala:1341:{21,35}, :1342:52, :1357:{28,42}, :1358:26, :1363:{28,42}, :1364:20, :1365:{28,42}, :1366:20, :1367:{28,42}, :1368:20, :1369:{28,42}, :1370:45, :1385:{28,42}, :1386:20, :1388:20
      endcase	// src/main/scala/Top.scala:1341:{21,35}, :1342:52, :1357:{28,42}, :1358:26, :1363:{28,42}, :1364:20, :1365:{28,42}, :1366:20, :1367:{28,42}, :1368:20, :1369:{28,42}, :1370:45, :1385:{28,42}, :1386:20, :1388:20
    end // always_comb
    assign io_operation = io_aluop ? casez_tmp : 5'h7;	// src/main/scala/Top.scala:1327:7, :1338:27, :1339:18, :1341:35, :1342:52, :1357:42
  endmodule
  
  module ALU(	// src/main/scala/Top.scala:1225:7
    input  [4:0]  io_operation,	// src/main/scala/Top.scala:1226:14
    input  [63:0] io_inputx,	// src/main/scala/Top.scala:1226:14
                  io_inputy,	// src/main/scala/Top.scala:1226:14
    output [63:0] io_result	// src/main/scala/Top.scala:1226:14
  );
  
    reg  [63:0]  casez_tmp;	// src/main/scala/Top.scala:1242:30, :1243:15, :1245:35
    wire [126:0] _io_result_T_50 = {63'h0, io_inputx} << io_inputy[5:0];	// src/main/scala/Top.scala:1271:15, :1290:{30,42}
    wire [31:0]  _io_result_T_36 = io_inputx[31:0] >> io_inputy[4:0];	// src/main/scala/Top.scala:1239:30, :1240:30, :1278:{49,63}
    wire [31:0]  _io_result_T_20 = $signed($signed(io_inputx[31:0]) >>> io_inputy[4:0]);	// src/main/scala/Top.scala:1239:30, :1240:30, :1264:{57,71}
    wire [31:0]  _io_result_T_10 = io_inputx[31:0] - io_inputy[31:0];	// src/main/scala/Top.scala:1239:30, :1240:30, :1257:49
    wire [31:0]  _io_result_T_2 = io_inputx[31:0] + io_inputy[31:0];	// src/main/scala/Top.scala:1239:30, :1240:30, :1250:49
    wire [62:0]  _io_result_T_44 = {31'h0, io_inputx[31:0]} << io_inputy[4:0];	// src/main/scala/Top.scala:1239:30, :1240:30, :1288:{49,63}
    always_comb begin	// src/main/scala/Top.scala:1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
      casez (io_operation[3:0])	// src/main/scala/Top.scala:1235:27, :1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
        4'b0000:
          casez_tmp = io_inputx ^ io_inputy;	// src/main/scala/Top.scala:1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:{15,28}, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
        4'b0001:
          casez_tmp = {63'h0, io_inputx < io_inputy};	// src/main/scala/Top.scala:1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:{15,29}, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
        4'b0010:
          casez_tmp =
            io_operation[4]
              ? {{32{_io_result_T_36[31]}}, _io_result_T_36}
              : io_inputx >> io_inputy[5:0];	// src/main/scala/Top.scala:1234:34, :1238:{46,51,61}, :1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1278:{17,49}, :1280:{17,30,42}, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
        4'b0011:
          casez_tmp =
            io_operation[4]
              ? {{32{_io_result_T_20[31]}}, _io_result_T_20}
              : $signed($signed(io_inputx) >>> io_inputy[5:0]);	// src/main/scala/Top.scala:1234:34, :1238:{46,51,61}, :1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1264:{17,57,79}, :1267:{17,38,50}, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
        4'b0100:
          casez_tmp =
            io_operation[4]
              ? {{32{_io_result_T_10[31]}}, _io_result_T_10}
              : io_inputx - io_inputy;	// src/main/scala/Top.scala:1234:34, :1238:{46,51,61}, :1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1257:{17,49}, :1259:{17,30}, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
        4'b0101:
          casez_tmp = io_inputx | io_inputy;	// src/main/scala/Top.scala:1242:{15,30}, :1243:15, :1245:{20,35}, :1246:{15,28}, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
        4'b0110:
          casez_tmp = io_inputx & io_inputy;	// src/main/scala/Top.scala:1242:{15,30}, :1243:{15,28}, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
        4'b0111:
          casez_tmp =
            io_operation[4]
              ? {{32{_io_result_T_2[31]}}, _io_result_T_2}
              : io_inputx + io_inputy;	// src/main/scala/Top.scala:1234:34, :1238:{46,51,61}, :1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1250:{17,49}, :1252:{17,30}, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
        4'b1000:
          casez_tmp =
            io_operation[4]
              ? {{32{_io_result_T_44[31]}}, _io_result_T_44[31:0]}
              : _io_result_T_50[63:0];	// src/main/scala/Top.scala:1234:34, :1238:{46,51,61,73}, :1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1288:{17,49}, :1290:{17,30}, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
        4'b1001:
          casez_tmp = {63'h0, $signed(io_inputx) < $signed(io_inputy)};	// src/main/scala/Top.scala:1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:{15,36}, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
        4'b1010:
          casez_tmp = ~(io_inputx | io_inputy);	// src/main/scala/Top.scala:1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:{15,18,30}, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
        4'b1011:
          casez_tmp = {63'h0, $signed(io_inputx) >= $signed(io_inputy)};	// src/main/scala/Top.scala:1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:{15,36}, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
        4'b1100:
          casez_tmp = {63'h0, io_inputx >= io_inputy};	// src/main/scala/Top.scala:1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:{15,29}, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
        4'b1101:
          casez_tmp = {63'h0, io_inputx == io_inputy};	// src/main/scala/Top.scala:1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:{15,28}, :1305:{20,35}, :1306:15, :1309:15
        4'b1110:
          casez_tmp = {63'h0, io_inputx != io_inputy};	// src/main/scala/Top.scala:1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:{15,28}, :1309:15
        default:
          casez_tmp = 64'h0;	// src/main/scala/Top.scala:1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
      endcase	// src/main/scala/Top.scala:1235:27, :1242:{15,30}, :1243:15, :1245:{20,35}, :1246:15, :1248:{20,35}, :1249:32, :1255:{20,35}, :1256:32, :1262:{20,35}, :1263:32, :1270:{20,35}, :1271:15, :1273:{20,35}, :1274:15, :1276:{20,35}, :1277:32, :1283:{20,35}, :1284:15, :1286:{20,35}, :1287:32, :1293:{20,35}, :1294:15, :1296:{20,35}, :1297:15, :1299:{20,35}, :1300:15, :1302:{20,35}, :1303:15, :1305:{20,35}, :1306:15, :1309:15
    end // always_comb
    assign io_result = casez_tmp;	// src/main/scala/Top.scala:1225:7, :1242:30, :1243:15, :1245:35
  endmodule
  
  module ImmediateGenerator(	// src/main/scala/Top.scala:962:7
    input  [63:0] io_instruction,	// src/main/scala/Top.scala:963:14
    output [63:0] io_sextImm	// src/main/scala/Top.scala:963:14
  );
  
    assign io_sextImm =
      io_instruction[6:0] == 7'h37
        ? {{32{io_instruction[31]}}, io_instruction[31:12], 12'h0}
        : io_instruction[6:0] == 7'h17
            ? {{32{io_instruction[31]}}, io_instruction[31:12], 12'h0}
            : io_instruction[6:0] == 7'h6F
                ? {{44{io_instruction[31]}},
                   io_instruction[19:12],
                   io_instruction[20],
                   io_instruction[30:21],
                   1'h0}
                : io_instruction[6:0] == 7'h67
                    ? {{52{io_instruction[31]}}, io_instruction[31:20]}
                    : io_instruction[6:0] == 7'h63
                        ? {{52{io_instruction[31]}},
                           io_instruction[7],
                           io_instruction[30:25],
                           io_instruction[11:8],
                           1'h0}
                        : io_instruction[6:0] == 7'h3
                            ? {{52{io_instruction[31]}}, io_instruction[31:20]}
                            : io_instruction[6:0] == 7'h23
                                ? {{52{io_instruction[31]}},
                                   io_instruction[31:25],
                                   io_instruction[11:7]}
                                : io_instruction[6:0] == 7'h13
                                    ? {{52{io_instruction[31]}}, io_instruction[31:20]}
                                    : io_instruction[6:0] == 7'h1B
                                        ? {{52{io_instruction[31]}}, io_instruction[31:20]}
                                        : io_instruction[6:0] == 7'h73
                                            ? {59'h0, io_instruction[19:15]}
                                            : 64'h0;	// src/main/scala/Top.scala:962:7, :969:14, :971:30, :973:18, :978:31, :979:{18,24,29,37,53}, :985:31, :986:{18,24,29,37}, :991:{35,55}, :992:{35,55}, :993:{18,24}, :996:31, :997:{18,24,29,36}, :1000:{35,55}, :1001:{35,58}, :1002:{18,24}, :1005:31, :1006:{18,24,29,37}, :1009:{35,59}, :1010:{18,24,29,37}, :1013:31, :1014:{18,24,29,36}, :1017:31, :1018:{18,24,29,36}, :1021:{18,24,29,53}
  endmodule
  
  module NextPC(	// src/main/scala/Top.scala:1410:7
    input         io_branch,	// src/main/scala/Top.scala:1411:14
    input  [1:0]  io_jumptype,	// src/main/scala/Top.scala:1411:14
    input  [63:0] io_inputx,	// src/main/scala/Top.scala:1411:14
                  io_inputy,	// src/main/scala/Top.scala:1411:14
    input  [2:0]  io_funct3,	// src/main/scala/Top.scala:1411:14
    input  [63:0] io_pc,	// src/main/scala/Top.scala:1411:14
                  io_imm,	// src/main/scala/Top.scala:1411:14
    output [63:0] io_nextpc	// src/main/scala/Top.scala:1411:14
  );
  
    assign io_nextpc =
      io_branch
        ? (io_funct3 == 3'h0 & io_inputx == io_inputy | io_funct3 == 3'h1
           & io_inputx != io_inputy | io_funct3 == 3'h4
           & $signed(io_inputx) < $signed(io_inputy) | io_funct3 == 3'h5
           & $signed(io_inputx) >= $signed(io_inputy) | io_funct3 == 3'h6
           & io_inputx < io_inputy | (&io_funct3) & io_inputx >= io_inputy
             ? io_pc + io_imm
             : io_pc + 64'h4)
        : (|io_jumptype)
            ? (io_jumptype[0] ? io_inputx + io_imm : io_pc + io_imm)
            : io_pc + 64'h4;	// src/main/scala/Top.scala:1410:7, :1424:20, :1425:{23,36,48}, :1426:{23,36,48}, :1427:{23,36,55}, :1428:{23,36,55}, :1429:{23,36,48}, :1430:{10,23,36,48,63}, :1431:{17,26}, :1435:{17,26}, :1438:{28,37}, :1439:{15,21,33,48}, :1440:44, :1443:{15,24}
  endmodule
  
  module SingleCycleCPU(	// src/main/scala/Top.scala:1038:7
    input         clock,	// src/main/scala/Top.scala:1038:7
                  reset,	// src/main/scala/Top.scala:1038:7
    output [63:0] io_imem_address,	// src/main/scala/Top.scala:12:14
    output        io_imem_valid,	// src/main/scala/Top.scala:12:14
    input         io_imem_good,	// src/main/scala/Top.scala:12:14
    input  [63:0] io_imem_instruction,	// src/main/scala/Top.scala:12:14
    input         io_imem_ready,	// src/main/scala/Top.scala:12:14
    output [63:0] io_dmem_address,	// src/main/scala/Top.scala:12:14
    output        io_dmem_valid,	// src/main/scala/Top.scala:12:14
    input         io_dmem_good,	// src/main/scala/Top.scala:12:14
    output [63:0] io_dmem_writedata,	// src/main/scala/Top.scala:12:14
    output        io_dmem_memread,	// src/main/scala/Top.scala:12:14
                  io_dmem_memwrite,	// src/main/scala/Top.scala:12:14
    output [1:0]  io_dmem_maskmode,	// src/main/scala/Top.scala:12:14
    output        io_dmem_sext,	// src/main/scala/Top.scala:12:14
    input  [63:0] io_dmem_readdata	// src/main/scala/Top.scala:12:14
  );
  
    wire [63:0] _nextpc_io_nextpc;	// src/main/scala/Top.scala:1046:26
    wire [63:0] _immGen_io_sextImm;	// src/main/scala/Top.scala:1045:26
    wire [63:0] _alu_io_result;	// src/main/scala/Top.scala:1044:26
    wire [4:0]  _aluControl_io_operation;	// src/main/scala/Top.scala:1043:26
    wire [63:0] _registers_io_readdata1;	// src/main/scala/Top.scala:1042:26
    wire [63:0] _registers_io_readdata2;	// src/main/scala/Top.scala:1042:26
    wire        _control_io_itype;	// src/main/scala/Top.scala:1041:26
    wire        _control_io_aluop;	// src/main/scala/Top.scala:1041:26
    wire        _control_io_src1;	// src/main/scala/Top.scala:1041:26
    wire [1:0]  _control_io_src2;	// src/main/scala/Top.scala:1041:26
    wire        _control_io_branch;	// src/main/scala/Top.scala:1041:26
    wire [1:0]  _control_io_jumptype;	// src/main/scala/Top.scala:1041:26
    wire        _control_io_resultselect;	// src/main/scala/Top.scala:1041:26
    wire [1:0]  _control_io_memop;	// src/main/scala/Top.scala:1041:26
    wire        _control_io_toreg;	// src/main/scala/Top.scala:1041:26
    wire        _control_io_regwrite;	// src/main/scala/Top.scala:1041:26
    wire        _control_io_wordinst;	// src/main/scala/Top.scala:1041:26
    reg  [63:0] pc;	// src/main/scala/Top.scala:1040:37
    wire [63:0] _GEN = pc % 64'h8;	// src/main/scala/Top.scala:1040:37, :1054:13
    wire [31:0] instruction =
      _GEN[3:0] == 4'h4 ? io_imem_instruction[63:32] : io_imem_instruction[31:0];	// src/main/scala/Top.scala:1054:{13,20,29}, :1055:{17,39}, :1057:{17,39}
    wire [63:0] _alu_io_inputy_T_5 =
      _control_io_src2 == 2'h0
        ? _registers_io_readdata2
        : _control_io_src2 == 2'h1
            ? _immGen_io_sextImm
            : {61'h0, _control_io_src2 == 2'h2, 2'h0};	// src/main/scala/Top.scala:1041:26, :1042:26, :1045:26, :1091:54, :1092:56, :1093:56, src/main/scala/chisel3/util/Mux.scala:126:16
    always @(posedge clock) begin	// src/main/scala/Top.scala:1038:7
      if (reset)	// src/main/scala/Top.scala:1038:7
        pc <= 64'h0;	// src/main/scala/Top.scala:1040:37
      else	// src/main/scala/Top.scala:1038:7
        pc <= _nextpc_io_nextpc;	// src/main/scala/Top.scala:1040:37, :1046:26
    end // always @(posedge)
    Control control (	// src/main/scala/Top.scala:1041:26
      .io_opcode       (instruction[6:0]),	// src/main/scala/Top.scala:1054:29, :1055:17, :1057:17, :1061:35
      .io_itype        (_control_io_itype),
      .io_aluop        (_control_io_aluop),
      .io_src1         (_control_io_src1),
      .io_src2         (_control_io_src2),
      .io_branch       (_control_io_branch),
      .io_jumptype     (_control_io_jumptype),
      .io_resultselect (_control_io_resultselect),
      .io_memop        (_control_io_memop),
      .io_toreg        (_control_io_toreg),
      .io_regwrite     (_control_io_regwrite),
      .io_wordinst     (_control_io_wordinst)
    );
    RegisterFile registers (	// src/main/scala/Top.scala:1042:26
      .clock        (clock),
      .io_readreg1  (instruction[19:15]),	// src/main/scala/Top.scala:1054:29, :1055:17, :1057:17, :1063:39
      .io_readreg2  (instruction[24:20]),	// src/main/scala/Top.scala:1054:29, :1055:17, :1057:17, :1064:39
      .io_writereg  (instruction[11:7]),	// src/main/scala/Top.scala:1054:29, :1055:17, :1057:17, :1065:39
      .io_writedata
        (_control_io_toreg
           ? io_dmem_readdata
           : _control_io_resultselect ? _immGen_io_sextImm : _alu_io_result),	// src/main/scala/Top.scala:1041:26, :1044:26, :1045:26, :1066:{32,72}
      .io_wen       ((|(instruction[11:7])) & _control_io_regwrite),	// src/main/scala/Top.scala:1041:26, :1054:29, :1055:17, :1057:17, :1065:39, :1067:{31,39}
      .io_readdata1 (_registers_io_readdata1),
      .io_readdata2 (_registers_io_readdata2)
    );
    ALUControl aluControl (	// src/main/scala/Top.scala:1043:26
      .io_aluop     (_control_io_aluop),	// src/main/scala/Top.scala:1041:26
      .io_itype     (_control_io_itype),	// src/main/scala/Top.scala:1041:26
      .io_funct7    (instruction[31:25]),	// src/main/scala/Top.scala:1054:29, :1055:17, :1057:17, :1085:38
      .io_funct3    (instruction[14:12]),	// src/main/scala/Top.scala:1054:29, :1055:17, :1057:17, :1059:27
      .io_wordinst  (_control_io_wordinst),	// src/main/scala/Top.scala:1041:26
      .io_operation (_aluControl_io_operation)
    );
    ALU alu (	// src/main/scala/Top.scala:1044:26
      .io_operation (_aluControl_io_operation),	// src/main/scala/Top.scala:1043:26
      .io_inputx    (_control_io_src1 ? pc : _registers_io_readdata1),	// src/main/scala/Top.scala:1040:37, :1041:26, :1042:26, :1090:23
      .io_inputy    (_alu_io_inputy_T_5),	// src/main/scala/chisel3/util/Mux.scala:126:16
      .io_result    (_alu_io_result)
    );
    ImmediateGenerator immGen (	// src/main/scala/Top.scala:1045:26
      .io_instruction ({32'h0, instruction}),	// src/main/scala/Top.scala:1054:29, :1055:17, :1057:17, :1073:25
      .io_sextImm     (_immGen_io_sextImm)
    );
    NextPC nextpc (	// src/main/scala/Top.scala:1046:26
      .io_branch   (_control_io_branch),	// src/main/scala/Top.scala:1041:26
      .io_jumptype (_control_io_jumptype),	// src/main/scala/Top.scala:1041:26
      .io_inputx   (_registers_io_readdata1),	// src/main/scala/Top.scala:1042:26
      .io_inputy   (_alu_io_inputy_T_5),	// src/main/scala/chisel3/util/Mux.scala:126:16
      .io_funct3   (instruction[14:12]),	// src/main/scala/Top.scala:1054:29, :1055:17, :1057:17, :1059:27
      .io_pc       (pc),	// src/main/scala/Top.scala:1040:37
      .io_imm      (_immGen_io_sextImm),	// src/main/scala/Top.scala:1045:26
      .io_nextpc   (_nextpc_io_nextpc)
    );
    assign io_imem_address = pc;	// src/main/scala/Top.scala:1038:7, :1040:37
    assign io_imem_valid = 1'h1;	// src/main/scala/Top.scala:1038:7, src/main/scala/chisel3/util/Counter.scala:118:16
    assign io_dmem_address = _alu_io_result;	// src/main/scala/Top.scala:1038:7, :1044:26
    assign io_dmem_valid = _control_io_memop[1];	// src/main/scala/Top.scala:1038:7, :1041:26, :1098:36
    assign io_dmem_writedata = _registers_io_readdata2;	// src/main/scala/Top.scala:1038:7, :1042:26
    assign io_dmem_memread = ~(_control_io_memop[0]);	// src/main/scala/Top.scala:1038:7, :1041:26, :1096:{22,39}
    assign io_dmem_memwrite = _control_io_memop[0];	// src/main/scala/Top.scala:1038:7, :1041:26, :1096:39
    assign io_dmem_maskmode = instruction[13:12];	// src/main/scala/Top.scala:1038:7, :1054:29, :1055:17, :1057:17, :1059:27, :1099:29
    assign io_dmem_sext = ~(instruction[14]);	// src/main/scala/Top.scala:1038:7, :1054:29, :1055:17, :1057:17, :1059:27, :1100:{19,26}
  endmodule
  
  // VCS coverage exclude_file
  module memory_16384x32(	// src/main/scala/Top.scala:314:19
    input  [13:0] R0_addr,
    input         R0_en,
                  R0_clk,
    output [31:0] R0_data,
    input  [13:0] R1_addr,
    input         R1_en,
                  R1_clk,
    output [31:0] R1_data,
    input  [13:0] R2_addr,
    input         R2_en,
                  R2_clk,
    output [31:0] R2_data,
    input  [13:0] R3_addr,
    input         R3_en,
                  R3_clk,
    output [31:0] R3_data,
    input  [13:0] W0_addr,
    input         W0_en,
                  W0_clk,
    input  [31:0] W0_data,
    input  [13:0] W1_addr,
    input         W1_en,
                  W1_clk,
    input  [31:0] W1_data
  );
  
    reg [31:0] Memory[0:16383];	// src/main/scala/Top.scala:314:19
    always @(posedge W0_clk) begin	// src/main/scala/Top.scala:314:19
      if (W0_en & 1'h1)	// src/main/scala/Top.scala:314:19
        Memory[W0_addr] <= W0_data;	// src/main/scala/Top.scala:314:19
      if (W1_en & 1'h1)	// src/main/scala/Top.scala:314:19
        Memory[W1_addr] <= W1_data;	// src/main/scala/Top.scala:314:19
    end // always @(posedge)
    assign R0_data = R0_en ? Memory[R0_addr] : 32'bx;	// src/main/scala/Top.scala:314:19
    assign R1_data = R1_en ? Memory[R1_addr] : 32'bx;	// src/main/scala/Top.scala:314:19
    assign R2_data = R2_en ? Memory[R2_addr] : 32'bx;	// src/main/scala/Top.scala:314:19
    assign R3_data = R3_en ? Memory[R3_addr] : 32'bx;	// src/main/scala/Top.scala:314:19
  endmodule
  
  module DualPortedCombinMemory(	// src/main/scala/Top.scala:1457:7
    input         clock,	// src/main/scala/Top.scala:1457:7
                  reset,	// src/main/scala/Top.scala:1457:7
                  io_imem_request_valid,	// src/main/scala/Top.scala:298:14
    input  [63:0] io_imem_request_bits_address,	// src/main/scala/Top.scala:298:14
    output [63:0] io_imem_response_bits_data,	// src/main/scala/Top.scala:298:14
    input         io_dmem_request_valid,	// src/main/scala/Top.scala:298:14
    input  [63:0] io_dmem_request_bits_address,	// src/main/scala/Top.scala:298:14
                  io_dmem_request_bits_writedata,	// src/main/scala/Top.scala:298:14
    input  [1:0]  io_dmem_request_bits_operation,	// src/main/scala/Top.scala:298:14
    output        io_dmem_response_valid,	// src/main/scala/Top.scala:298:14
    output [63:0] io_dmem_response_bits_data	// src/main/scala/Top.scala:298:14
  );
  
    wire [31:0] _memory_ext_R0_data;	// src/main/scala/Top.scala:314:19
    wire [31:0] _memory_ext_R1_data;	// src/main/scala/Top.scala:314:19
    wire [31:0] _memory_ext_R2_data;	// src/main/scala/Top.scala:314:19
    wire [31:0] _memory_ext_R3_data;	// src/main/scala/Top.scala:314:19
    wire        _GEN = io_imem_request_bits_address < 64'h10000;	// src/main/scala/Top.scala:1478:27
    wire        _GEN_0 = io_imem_request_valid & _GEN;	// src/main/scala/Top.scala:314:19, :1468:32, :1478:{27,37}
    `ifndef SYNTHESIS	// src/main/scala/Top.scala:1500:12
      wire _GEN_1 = io_dmem_request_valid & ~reset;	// src/main/scala/Top.scala:1500:12
      always @(posedge clock) begin	// src/main/scala/Top.scala:1500:12
        if (_GEN_1 & io_dmem_request_bits_operation == 2'h1) begin	// src/main/scala/Top.scala:1500:{12,31}
          if (`ASSERT_VERBOSE_COND_)	// src/main/scala/Top.scala:1500:12
            $error("Assertion failed\n    at Top.scala:1500 assert (request.operation =/= MemoryOperation.Write)\n");	// src/main/scala/Top.scala:1500:12
          if (`STOP_COND_)	// src/main/scala/Top.scala:1500:12
            $fatal;	// src/main/scala/Top.scala:1500:12
        end
        if (_GEN_1 & (|(io_dmem_request_bits_address[63:16]))) begin	// src/main/scala/Top.scala:1500:12, :1502:{12,29}
          if (`ASSERT_VERBOSE_COND_)	// src/main/scala/Top.scala:1502:12
            $error("Assertion failed\n    at Top.scala:1502 assert (request.address < size.U)\n");	// src/main/scala/Top.scala:1502:12
          if (`STOP_COND_)	// src/main/scala/Top.scala:1502:12
            $fatal;	// src/main/scala/Top.scala:1502:12
        end
      end // always @(posedge)
    `endif // not def SYNTHESIS
    wire [13:0] _io_dmem_response_bits_data_T_2 =
      io_dmem_request_bits_address[15:2] + 14'h1;	// src/main/scala/Top.scala:1481:60, :1505:34, :1506:58
    wire        _GEN_2 = io_dmem_request_valid & io_dmem_request_bits_operation == 2'h2;	// src/main/scala/Top.scala:314:19, :1496:32, :1505:34, :1510:{29,60}
    memory_16384x32 memory_ext (	// src/main/scala/Top.scala:314:19
      .R0_addr ({io_imem_request_bits_address[15:3], 1'h0}),	// src/main/scala/Top.scala:1457:7, :1481:{60,74}
      .R0_en   (_GEN_0),	// src/main/scala/Top.scala:314:19, :1468:32, :1478:37
      .R0_clk  (clock),
      .R0_data (_memory_ext_R0_data),
      .R1_addr ({io_imem_request_bits_address[15:3], 1'h0} + 14'h1),	// src/main/scala/Top.scala:1457:7, :1481:60
      .R1_en   (_GEN_0),	// src/main/scala/Top.scala:314:19, :1468:32, :1478:37
      .R1_clk  (clock),
      .R1_data (_memory_ext_R1_data),
      .R2_addr (io_dmem_request_bits_address[15:2]),	// src/main/scala/Top.scala:1506:72
      .R2_en   (io_dmem_request_valid),
      .R2_clk  (clock),
      .R2_data (_memory_ext_R2_data),
      .R3_addr (_io_dmem_response_bits_data_T_2),	// src/main/scala/Top.scala:1505:34, :1506:58
      .R3_en   (io_dmem_request_valid),
      .R3_clk  (clock),
      .R3_data (_memory_ext_R3_data),
      .W0_addr (_io_dmem_response_bits_data_T_2),	// src/main/scala/Top.scala:1505:34, :1506:58
      .W0_en   (_GEN_2),	// src/main/scala/Top.scala:314:19, :1496:32, :1510:60
      .W0_clk  (clock),
      .W0_data (io_dmem_request_bits_writedata[63:32]),	// src/main/scala/Top.scala:1512:54
      .W1_addr (io_dmem_request_bits_address[15:2]),	// src/main/scala/Top.scala:1505:34, :1506:58
      .W1_en   (_GEN_2),	// src/main/scala/Top.scala:314:19, :1496:32, :1510:60
      .W1_clk  (clock),
      .W1_data (io_dmem_request_bits_writedata[31:0])	// src/main/scala/Top.scala:1511:46
    );
    assign io_imem_response_bits_data =
      io_imem_request_valid & _GEN ? {_memory_ext_R1_data, _memory_ext_R0_data} : 64'h0;	// src/main/scala/Top.scala:311:{20,35}, :314:19, :1457:7, :1468:32, :1478:{27,37}, :1481:{34,40}
    assign io_dmem_response_valid = io_dmem_request_valid;	// src/main/scala/Top.scala:1457:7
    assign io_dmem_response_bits_data =
      io_dmem_request_valid ? {_memory_ext_R3_data, _memory_ext_R2_data} : 64'h0;	// src/main/scala/Top.scala:311:35, :312:20, :314:19, :1457:7, :1496:32, :1506:{32,38}
  endmodule
  
  module ICombinMemPort(	// src/main/scala/Top.scala:640:7
    input  [63:0] io_pipeline_address,	// src/main/scala/Top.scala:328:15
    input         io_pipeline_valid,	// src/main/scala/Top.scala:328:15
    output [63:0] io_pipeline_instruction,	// src/main/scala/Top.scala:328:15
    output        io_bus_request_valid,	// src/main/scala/Top.scala:328:15
    output [63:0] io_bus_request_bits_address,	// src/main/scala/Top.scala:328:15
    input  [63:0] io_bus_response_bits_data	// src/main/scala/Top.scala:328:15
  );
  
    assign io_pipeline_instruction = io_bus_response_bits_data;	// src/main/scala/Top.scala:640:7
    assign io_bus_request_valid = io_pipeline_valid;	// src/main/scala/Top.scala:640:7
    assign io_bus_request_bits_address = io_pipeline_address;	// src/main/scala/Top.scala:640:7
  endmodule
  
  module DCombinMemPort(	// src/main/scala/Top.scala:667:7
    input         clock,	// src/main/scala/Top.scala:667:7
                  reset,	// src/main/scala/Top.scala:667:7
    input  [63:0] io_pipeline_address,	// src/main/scala/Top.scala:345:15
    input         io_pipeline_valid,	// src/main/scala/Top.scala:345:15
    input  [63:0] io_pipeline_writedata,	// src/main/scala/Top.scala:345:15
    input         io_pipeline_memread,	// src/main/scala/Top.scala:345:15
                  io_pipeline_memwrite,	// src/main/scala/Top.scala:345:15
    input  [1:0]  io_pipeline_maskmode,	// src/main/scala/Top.scala:345:15
    input         io_pipeline_sext,	// src/main/scala/Top.scala:345:15
    output [63:0] io_pipeline_readdata,	// src/main/scala/Top.scala:345:15
    output        io_bus_request_valid,	// src/main/scala/Top.scala:345:15
    output [63:0] io_bus_request_bits_address,	// src/main/scala/Top.scala:345:15
                  io_bus_request_bits_writedata,	// src/main/scala/Top.scala:345:15
    output [1:0]  io_bus_request_bits_operation,	// src/main/scala/Top.scala:345:15
    input         io_bus_response_valid,	// src/main/scala/Top.scala:345:15
    input  [63:0] io_bus_response_bits_data	// src/main/scala/Top.scala:345:15
  );
  
    wire         io_bus_request_valid_0 =
      io_pipeline_valid & (io_pipeline_memread | io_pipeline_memwrite);	// src/main/scala/Top.scala:670:{27,51}
    `ifndef SYNTHESIS	// src/main/scala/Top.scala:672:11
      always @(posedge clock) begin	// src/main/scala/Top.scala:672:11
        if (io_bus_request_valid_0 & ~reset & io_pipeline_memread
            & io_pipeline_memwrite) begin	// src/main/scala/Top.scala:670:27, :672:11
          if (`ASSERT_VERBOSE_COND_)	// src/main/scala/Top.scala:672:11
            $error("Assertion failed\n    at Top.scala:672 assert(!(io.pipeline.memread && io.pipeline.memwrite))\n");	// src/main/scala/Top.scala:672:11
          if (`STOP_COND_)	// src/main/scala/Top.scala:672:11
            $fatal;	// src/main/scala/Top.scala:672:11
        end
      end // always @(posedge)
    `endif // not def SYNTHESIS
    reg  [63:0]  casez_tmp;	// src/main/scala/Top.scala:714:45, :715:26, :716:52
    always_comb begin	// src/main/scala/Top.scala:714:{36,45}, :715:26, :716:{43,52}, :717:26, :718:{43,52}, :719:26, :721:26
      casez (io_pipeline_maskmode)	// src/main/scala/Top.scala:714:{36,45}, :715:26, :716:{43,52}, :717:26, :718:{43,52}, :719:26, :721:26
        2'b00:
          casez_tmp = 64'hFF;	// src/main/scala/Top.scala:714:{36,45}, :715:26, :716:{43,52}, :717:26, :718:{43,52}, :719:26, :721:26
        2'b01:
          casez_tmp = 64'hFFFF;	// src/main/scala/Top.scala:714:{36,45}, :715:26, :716:{43,52}, :717:26, :718:{43,52}, :719:26, :721:26
        2'b10:
          casez_tmp = 64'hFFFFFFFF;	// src/main/scala/Top.scala:714:{36,45}, :715:26, :716:{43,52}, :717:26, :718:{43,52}, :719:26, :721:26
        default:
          casez_tmp = 64'hFFFFFFFFFFFFFFFF;	// src/main/scala/Top.scala:714:{36,45}, :715:26, :716:{43,52}, :717:26, :718:{43,52}, :719:26, :721:26
      endcase	// src/main/scala/Top.scala:714:{36,45}, :715:26, :716:{43,52}, :717:26, :718:{43,52}, :719:26, :721:26
    end // always_comb
    wire [126:0] _GEN = {122'h0, io_pipeline_address[1:0], 3'h0};	// src/main/scala/Top.scala:705:41, :724:{50,61}
    wire [126:0] _writedata_mask_shifted_T_1 = {63'h0, casez_tmp} << _GEN;	// src/main/scala/Top.scala:714:45, :715:26, :716:52, :724:50
    wire [126:0] _writedata_shifted_T_1 = {63'h0, io_pipeline_writedata} << _GEN;	// src/main/scala/Top.scala:724:50, :725:52
    reg  [63:0]  casez_tmp_0;	// src/main/scala/Top.scala:742:43, :744:23, :745:50
    wire [63:0]  _GEN_0 = {59'h0, io_pipeline_address[1:0], 3'h0};	// src/main/scala/Top.scala:724:61, :741:39, :744:53
    wire [63:0]  _readdata_mask_T_2 = io_bus_response_bits_data >> _GEN_0;	// src/main/scala/Top.scala:744:53
    wire [63:0]  _readdata_mask_T_5 = io_bus_response_bits_data >> _GEN_0;	// src/main/scala/Top.scala:744:53, :747:53
    wire [63:0]  _readdata_mask_T_8 = io_bus_response_bits_data >> _GEN_0;	// src/main/scala/Top.scala:744:53, :750:53
    always_comb begin	// src/main/scala/Top.scala:714:36, :716:43, :718:43, :742:43, :744:23, :745:50, :747:23, :748:50, :750:23, :753:23
      casez (io_pipeline_maskmode)	// src/main/scala/Top.scala:714:36, :716:43, :718:43, :742:43, :744:23, :745:50, :747:23, :748:50, :750:23, :753:23
        2'b00:
          casez_tmp_0 = {56'h0, _readdata_mask_T_2[7:0]};	// src/main/scala/Top.scala:714:36, :715:37, :716:43, :718:43, :742:43, :744:{23,53,72}, :745:50, :747:23, :748:50, :750:23, :753:23
        2'b01:
          casez_tmp_0 = {48'h0, _readdata_mask_T_5[15:0]};	// src/main/scala/Top.scala:714:36, :716:43, :717:37, :718:43, :742:43, :744:23, :745:50, :747:{23,53,72}, :748:50, :750:23, :753:23
        2'b10:
          casez_tmp_0 = {32'h0, _readdata_mask_T_8[31:0]};	// src/main/scala/Top.scala:714:36, :716:43, :718:43, :719:37, :742:43, :744:23, :745:50, :747:23, :748:50, :750:{23,53,72}, :753:23
        default:
          casez_tmp_0 = io_bus_response_bits_data;	// src/main/scala/Top.scala:714:36, :716:43, :718:43, :742:43, :744:23, :745:50, :747:23, :748:50, :750:23, :753:23
      endcase	// src/main/scala/Top.scala:714:36, :716:43, :718:43, :742:43, :744:23, :745:50, :747:23, :748:50, :750:23, :753:23
    end // always_comb
    reg  [63:0]  casez_tmp_1;	// src/main/scala/Top.scala:757:45, :759:30, :760:52
    always_comb begin	// src/main/scala/Top.scala:714:36, :716:43, :718:43, :757:45, :759:30, :760:52, :762:30, :763:52, :765:30, :768:30
      casez (io_pipeline_maskmode)	// src/main/scala/Top.scala:714:36, :716:43, :718:43, :757:45, :759:30, :760:52, :762:30, :763:52, :765:30, :768:30
        2'b00:
          casez_tmp_1 = {{56{casez_tmp_0[7]}}, casez_tmp_0[7:0]};	// src/main/scala/Top.scala:714:36, :716:43, :718:43, :742:43, :744:23, :745:50, :757:45, :759:{30,36,41,59,79}, :760:52, :762:30, :763:52, :765:30, :768:30
        2'b01:
          casez_tmp_1 = {{48{casez_tmp_0[15]}}, casez_tmp_0[15:0]};	// src/main/scala/Top.scala:714:36, :716:43, :718:43, :742:43, :744:23, :745:50, :757:45, :759:30, :760:52, :762:{30,36,41,59,79}, :763:52, :765:30, :768:30
        2'b10:
          casez_tmp_1 = {{32{casez_tmp_0[31]}}, casez_tmp_0[31:0]};	// src/main/scala/Top.scala:714:36, :716:43, :718:43, :742:43, :744:23, :745:50, :757:45, :759:30, :760:52, :762:30, :763:52, :765:{30,36,41,59,79}, :768:30
        default:
          casez_tmp_1 = casez_tmp_0;	// src/main/scala/Top.scala:714:36, :716:43, :718:43, :742:43, :744:23, :745:50, :757:45, :759:30, :760:52, :762:30, :763:52, :765:30, :768:30
      endcase	// src/main/scala/Top.scala:714:36, :716:43, :718:43, :757:45, :759:30, :760:52, :762:30, :763:52, :765:30, :768:30
    end // always_comb
    assign io_pipeline_readdata =
      ~io_bus_response_valid | io_pipeline_memwrite | ~io_pipeline_memread
        ? 64'h0
        : io_pipeline_sext ? casez_tmp_1 : casez_tmp_0;	// src/main/scala/Top.scala:350:{15,31}, :667:7, :697:32, :698:33, :736:39, :742:43, :744:23, :745:50, :756:31, :757:45, :759:30, :760:52, :771:28
    assign io_bus_request_valid = io_bus_request_valid_0;	// src/main/scala/Top.scala:667:7, :670:27
    assign io_bus_request_bits_address = io_pipeline_address;	// src/main/scala/Top.scala:667:7
    assign io_bus_request_bits_writedata =
      io_pipeline_maskmode != 2'h3
        ? io_bus_response_bits_data & ~(_writedata_mask_shifted_T_1[63:0])
          | _writedata_shifted_T_1[63:0] & _writedata_mask_shifted_T_1[63:0]
        : io_pipeline_writedata;	// src/main/scala/Top.scala:667:7, :703:{34,43}, :724:{32,50}, :725:{27,52}, :728:26, :730:{19,32,49,70}, :732:19
    assign io_bus_request_bits_operation = {io_pipeline_memwrite, 1'h0};	// src/main/scala/Top.scala:667:7, :677:33, :686:37, :689:37
  endmodule
  
  module Top(	// src/main/scala/Top.scala:260:7
    input  clock,	// src/main/scala/Top.scala:260:7
           reset,	// src/main/scala/Top.scala:260:7
    output io_success	// src/main/scala/Top.scala:262:14
  );
  
    wire [63:0] _dmem_io_pipeline_readdata;	// src/main/scala/Top.scala:272:20
    wire        _dmem_io_bus_request_valid;	// src/main/scala/Top.scala:272:20
    wire [63:0] _dmem_io_bus_request_bits_address;	// src/main/scala/Top.scala:272:20
    wire [63:0] _dmem_io_bus_request_bits_writedata;	// src/main/scala/Top.scala:272:20
    wire [1:0]  _dmem_io_bus_request_bits_operation;	// src/main/scala/Top.scala:272:20
    wire [63:0] _imem_io_pipeline_instruction;	// src/main/scala/Top.scala:271:20
    wire        _imem_io_bus_request_valid;	// src/main/scala/Top.scala:271:20
    wire [63:0] _imem_io_bus_request_bits_address;	// src/main/scala/Top.scala:271:20
    wire [63:0] _mem_io_imem_response_bits_data;	// src/main/scala/Top.scala:269:20
    wire        _mem_io_dmem_response_valid;	// src/main/scala/Top.scala:269:20
    wire [63:0] _mem_io_dmem_response_bits_data;	// src/main/scala/Top.scala:269:20
    wire [63:0] _cpu_io_imem_address;	// src/main/scala/Top.scala:268:20
    wire        _cpu_io_imem_valid;	// src/main/scala/Top.scala:268:20
    wire [63:0] _cpu_io_dmem_address;	// src/main/scala/Top.scala:268:20
    wire        _cpu_io_dmem_valid;	// src/main/scala/Top.scala:268:20
    wire [63:0] _cpu_io_dmem_writedata;	// src/main/scala/Top.scala:268:20
    wire        _cpu_io_dmem_memread;	// src/main/scala/Top.scala:268:20
    wire        _cpu_io_dmem_memwrite;	// src/main/scala/Top.scala:268:20
    wire [1:0]  _cpu_io_dmem_maskmode;	// src/main/scala/Top.scala:268:20
    wire        _cpu_io_dmem_sext;	// src/main/scala/Top.scala:268:20
    SingleCycleCPU cpu (	// src/main/scala/Top.scala:268:20
      .clock               (clock),
      .reset               (reset),
      .io_imem_address     (_cpu_io_imem_address),
      .io_imem_valid       (_cpu_io_imem_valid),
      .io_imem_good        (1'h1),	// src/main/scala/Top.scala:268:20, :269:20, :271:20, :272:20
      .io_imem_instruction (_imem_io_pipeline_instruction),	// src/main/scala/Top.scala:271:20
      .io_imem_ready       (1'h1),	// src/main/scala/Top.scala:268:20, :269:20, :271:20, :272:20
      .io_dmem_address     (_cpu_io_dmem_address),
      .io_dmem_valid       (_cpu_io_dmem_valid),
      .io_dmem_good        (1'h1),	// src/main/scala/Top.scala:268:20, :269:20, :271:20, :272:20
      .io_dmem_writedata   (_cpu_io_dmem_writedata),
      .io_dmem_memread     (_cpu_io_dmem_memread),
      .io_dmem_memwrite    (_cpu_io_dmem_memwrite),
      .io_dmem_maskmode    (_cpu_io_dmem_maskmode),
      .io_dmem_sext        (_cpu_io_dmem_sext),
      .io_dmem_readdata    (_dmem_io_pipeline_readdata)	// src/main/scala/Top.scala:272:20
    );
    DualPortedCombinMemory mem (	// src/main/scala/Top.scala:269:20
      .clock                          (clock),
      .reset                          (reset),
      .io_imem_request_valid          (_imem_io_bus_request_valid),	// src/main/scala/Top.scala:271:20
      .io_imem_request_bits_address   (_imem_io_bus_request_bits_address),	// src/main/scala/Top.scala:271:20
      .io_imem_response_bits_data     (_mem_io_imem_response_bits_data),
      .io_dmem_request_valid          (_dmem_io_bus_request_valid),	// src/main/scala/Top.scala:272:20
      .io_dmem_request_bits_address   (_dmem_io_bus_request_bits_address),	// src/main/scala/Top.scala:272:20
      .io_dmem_request_bits_writedata (_dmem_io_bus_request_bits_writedata),	// src/main/scala/Top.scala:272:20
      .io_dmem_request_bits_operation (_dmem_io_bus_request_bits_operation),	// src/main/scala/Top.scala:272:20
      .io_dmem_response_valid         (_mem_io_dmem_response_valid),
      .io_dmem_response_bits_data     (_mem_io_dmem_response_bits_data)
    );
    ICombinMemPort imem (	// src/main/scala/Top.scala:271:20
      .io_pipeline_address         (_cpu_io_imem_address),	// src/main/scala/Top.scala:268:20
      .io_pipeline_valid           (_cpu_io_imem_valid),	// src/main/scala/Top.scala:268:20
      .io_pipeline_instruction     (_imem_io_pipeline_instruction),
      .io_bus_request_valid        (_imem_io_bus_request_valid),
      .io_bus_request_bits_address (_imem_io_bus_request_bits_address),
      .io_bus_response_bits_data   (_mem_io_imem_response_bits_data)	// src/main/scala/Top.scala:269:20
    );
    DCombinMemPort dmem (	// src/main/scala/Top.scala:272:20
      .clock                         (clock),
      .reset                         (reset),
      .io_pipeline_address           (_cpu_io_dmem_address),	// src/main/scala/Top.scala:268:20
      .io_pipeline_valid             (_cpu_io_dmem_valid),	// src/main/scala/Top.scala:268:20
      .io_pipeline_writedata         (_cpu_io_dmem_writedata),	// src/main/scala/Top.scala:268:20
      .io_pipeline_memread           (_cpu_io_dmem_memread),	// src/main/scala/Top.scala:268:20
      .io_pipeline_memwrite          (_cpu_io_dmem_memwrite),	// src/main/scala/Top.scala:268:20
      .io_pipeline_maskmode          (_cpu_io_dmem_maskmode),	// src/main/scala/Top.scala:268:20
      .io_pipeline_sext              (_cpu_io_dmem_sext),	// src/main/scala/Top.scala:268:20
      .io_pipeline_readdata          (_dmem_io_pipeline_readdata),
      .io_bus_request_valid          (_dmem_io_bus_request_valid),
      .io_bus_request_bits_address   (_dmem_io_bus_request_bits_address),
      .io_bus_request_bits_writedata (_dmem_io_bus_request_bits_writedata),
      .io_bus_request_bits_operation (_dmem_io_bus_request_bits_operation),
      .io_bus_response_valid         (_mem_io_dmem_response_valid),	// src/main/scala/Top.scala:269:20
      .io_bus_response_bits_data     (_mem_io_dmem_response_bits_data)	// src/main/scala/Top.scala:269:20
    );
    assign io_success = 1'h0;	// src/main/scala/Top.scala:260:7, :266:14
  endmodule
  
chisel_original: |
  // The base abstract CPU module which declares the CoreIO of a CPU
  package dinocpu
  
  import chisel3._
  import chisel3.util._
  import _root_.circt.stage.ChiselStage
  
  class Top(val conf: CPUConfig) extends Module
  {
    val io = IO(new Bundle{
      val success = Output(Bool())
    })
  
    io.success := DontCare
  
    val cpu  = Module(conf.getCPU())
    val mem  = Module(conf.getNewMem())
  
    val imem = Module(conf.getIMemPort())
    val dmem = Module(conf.getDMemPort())
  
    conf.printConfig()
  
    mem.wireMemory (imem, dmem)
    cpu.io.imem <> imem.io.pipeline
    cpu.io.dmem <> dmem.io.pipeline
  }

  /**
    * Base CPU module which all CPU models implement
    */
  abstract class BaseCPU extends Module {
    val io = IO(new CoreIO())
  
    // Required so the compiler doesn't optimize things away when testing
    // incomplete designs.
    dontTouch(io)
  }
  
  // This file contains the branch preditor logic
  
  /**
   * I/O for the branch predictors
   *
   * Input:  pc, the pc to use to predict whether the branch is taken or not. From decode
   * Input:  update, true if we should update the prediction we made last cycle
   * Input:  taken, true if the branch was actually taken, false otherwise
   *
   * Output: prediction, true if the branch is predicted to be taken, false otherwise
   */
  class BranchPredIO extends Bundle {
    val pc         = Input(UInt(64.W))
    val update     = Input(Bool())
    val taken      = Input(Bool())
  
    val prediction = Output(Bool())
  }
  
  /**
   * Base class for all branch predictors. Simply declares the IO and has some
   * simple functions for updating saturating counters
   */
  abstract class BaseBranchPredictor(val c: CPUConfig) extends Module {
    val io = IO(new BranchPredIO)
  
    // Default value is weakly taken for each branch
    val defaultSaturatingCounter = (1 << c.saturatingCounterBits - 1)
    // Create a register file with c.branchPredTableEntries
    // Each entry is c.saturatingCounterBits.W bits wide
    val predictionTable = RegInit(VecInit(Seq.fill(c.branchPredTableEntries)(defaultSaturatingCounter.U(c.saturatingCounterBits.W))))
  
    // Function to increment a saturating counter
    def incrCounter(counter: UInt): Unit = {
      val max = (1 << c.saturatingCounterBits) - 1
      when (counter =/= max.U) {
        counter := counter + 1.U
      }
    }
  
    // Function to decrement a saturating counter
    def decrCounter(counter: UInt): Unit = {
      when (counter =/= 0.U) {
        counter := counter - 1.U
      }
    }
  }
  
  /**
   * An always not taken branch predictor
   *
   */
  class AlwaysNotTakenPredictor(implicit val conf: CPUConfig) extends BaseBranchPredictor(conf) {
    io.prediction := false.B
  }
  
  /**
   * An always taken branch predictor
   *
   */
  class AlwaysTakenPredictor(implicit val conf: CPUConfig) extends BaseBranchPredictor(conf) {
    io.prediction := true.B
  }
  
  /**
   * A simple local predictor
   */
  class LocalPredictor(implicit val conf: CPUConfig) extends BaseBranchPredictor(conf) {
  
    // Register to store the last branch predicted so we can update the tables.
    // This will also work for back to back branches since we resolve them in
    // execute (one cycle later)
    val lastBranch = Reg(UInt())
  
    when (io.update) {
      when (io.taken) {
        incrCounter(predictionTable(lastBranch))
      } .otherwise {
        decrCounter(predictionTable(lastBranch))
      }
    }
  
    // The first bit for the table access is based on the number of entries.
    // +2 since we ignore the bottom two bits
    val tableIndex = io.pc(log2Floor(conf.branchPredTableEntries) + 2, 2)
  
    // Return the high-order bit
    io.prediction := predictionTable(tableIndex)(conf.saturatingCounterBits - 1)
  
    // Remember the last pc to update the table later
    lastBranch := tableIndex
  }
  
  /**
   * A simple global history predictor
   */
  class GlobalHistoryPredictor(implicit val conf: CPUConfig) extends BaseBranchPredictor(conf) {
  
    // The length is based on the size of the branch history table
    val historyBits = log2Floor(conf.branchPredTableEntries)
    // Need one extra bit for the "last" history
    val history = RegInit(0.U((historyBits+1).W))
  
    val curhist = history(historyBits,0)
    when(io.update) {
      // Update the prediction for this branch history
      // Use the last branch history.
      when (io.taken) {
        incrCounter(predictionTable(curhist))
      } .otherwise {
        decrCounter(predictionTable(curhist))
      }
  
      history := Cat(curhist, io.taken) // update the history register at the end of the cycle
    }
  
    io.prediction := predictionTable(curhist)(conf.saturatingCounterBits - 1)
  }
  
  // Configurations for the dinocpu
  // For file length
  import java.io.File
  
  /**
   * This class configures all of the dinocpus. It takes parameters for the type of CPU model
   * (e.g., single-cycle, five-cycle, etc.), and the memories to hook up.
   */
  class CPUConfig
  {
    /** The type of CPU to elaborate */
    var cpuType = "single-cycle"
  
    /** The type of branch predictor to use */
    var branchPredictor = "always-not-taken"
    /** Number of bits for the saturating counters */
    var saturatingCounterBits = 2
    /** Number of entries in the branch predictor table */
    var branchPredTableEntries = 32
  
    /** The memory file location */
    var memFile = "test"
    /** The noncombinational memory latency */
    var memLatency = 5
    /** The port types **/
    var memPortType = "combinational-port"
    /** The backing memory type */
    var memType = "combinational"
  
    def printConfig(): Unit = {
      println(s"CPU Type: ${cpuType}")
      println(s"Branch predictor: ${branchPredictor}")
      println(s"Memory file: ${memFile}")
      println(s"Memory type: ${memType}")
      println(s"Memory port type: ${memPortType}")
      println(s"Memory latency (ignored if combinational): ${memLatency}")
    }
  
    /**
     * Returns the CPU that we will be elaborating
     *
     * @return A CPU to elaborate.
     */
    def getCPU(): BaseCPU = {
      implicit val conf = this
      cpuType match {
        case "single-cycle" => new SingleCycleCPU
        case _ => throw new IllegalArgumentException("Must specify known CPU model")
      }
    }
  
    def getBranchPredictor: BaseBranchPredictor = {
      implicit val conf = this
      branchPredictor match {
        case "always-taken"     => new AlwaysTakenPredictor
        case "always-not-taken" => new AlwaysNotTakenPredictor
        case "local"            => new LocalPredictor
        case "global"           => new GlobalHistoryPredictor
        case _ => throw new IllegalArgumentException("Must specify known branch predictor")
      }
    }
  
    /**
      * Create a memory with data from a file
      *
      * @param minSize is the minimum size for the memory. If the binary file is
      *        smaller than this, create a memory that is this size.
      * @return [[BaseDualPortedMemory]] object
      */
    def getNewMem(minSize: Int = 1 << 16): BaseDualPortedMemory = {
      val f = new File(memFile)
      if (f.length == 0) {
        println("WARNING: No file will be loaded for data memory")
      }
  
      memType match {
        case "combinational"     => new DualPortedCombinMemory (minSize, memFile)
        case "non-combinational" => new DualPortedNonCombinMemory (minSize, memFile, memLatency)
        case _ => throw new IllegalArgumentException("Must specify known backing memory type")
      }
    }
  
    /**
      * Create an instruction memory port
      *
      * @return [[BaseIMemPort]] object
      */
    def getIMemPort(): BaseIMemPort = {
      val f = new File(memFile)
      if (f.length == 0) {
        println("WARNING: No file will be loaded for data memory")
      }
  
      memPortType match {
        case "combinational-port"     => new ICombinMemPort
        case "non-combinational-port" => new INonCombinMemPort
        // case "non-combinational-cache" => new ICache
        case _ => throw new IllegalArgumentException("Must specify known instruction memory port type")
      }
    }
  
    /**
      * Create a data memory port
      *
      * @return [[BaseDMemPort]] object
      */
    def getDMemPort(): BaseDMemPort = {
      val f = new File(memFile)
      if (f.length == 0) {
        println("WARNING: No file will be loaded for data memory")
      }
  
      memPortType match {
        case "combinational-port"     => new DCombinMemPort
        case "non-combinational-port" => new DNonCombinMemPort
        // case "non-combinational-cache" => new DCache
        case _ => throw new IllegalArgumentException("Must specify known data memory port type")
      }
    }
  } 
  
  import chisel3.util.{Decoupled, Valid}
  import chisel3.util.experimental.loadMemoryFromFile
  
  /**
    * Base class for all modular backing memories. Simply declares the IO and the memory file.
    */
  abstract class BaseDualPortedMemory(size: Int, memfile: String) extends Module {
    def wireMemory (imem: BaseIMemPort, dmem: BaseDMemPort): Unit = {
      // Connect memory imem IO to dmem accessor
      this.io.imem.request <> imem.io.bus.request
      imem.io.bus.response <> this.io.imem.response
      // Connect memory dmem IO to dmem accessor
      this.io.dmem.request <> dmem.io.bus.request
      dmem.io.bus.response <> this.io.dmem.response
    }
  
    val io = IO(new Bundle {
      val imem = new MemPortBusIO
      val dmem = new MemPortBusIO
    })
  
    // Intentional DontCares:
    // The connections between the ports and the backing memory, along with the
    // ports internally assigning values to the, means that these DontCares
    // should be completely 'overwritten' when the CPU is elaborated
    io.imem.request <> DontCare
    io.dmem.request <> DontCare
    // Zero out response ports to 0, so that the pipeline does not receive any
    // 'DontCare' values from the memory ports
    io.imem.response <> 0.U.asTypeOf(Valid (new Response))
    io.dmem.response <> 0.U.asTypeOf(Valid (new Response))
  
    val memory = Mem(math.ceil(size.toDouble/4).toInt, UInt(32.W))
    val memFileObj = new java.io.File(memfile)
    if (memFileObj.exists() && memFileObj.length() > 0) {
      loadMemoryFromFile(memory, memfile)
    } else {
      println(s"WARNING: Memory initialization file '$memfile' not found or empty; skipping loadMemoryFromFile")
    }
  
  }
  
  /**
    * Base class for all instruction ports. Simply declares the IO.
    */
  abstract class BaseIMemPort extends Module {
    val io = IO (new Bundle {
      val pipeline = new IMemPortIO
      val bus  = Flipped (new MemPortBusIO)
    })
  
    io.pipeline <> 0.U.asTypeOf (new IMemPortIO)
    // Intentional DontCare:
    // The connections between the ports and the backing memory, along with the
    // ports internally assigning values to the, means that these DontCares
    // should be completely 'overwritten' when the CPU is elaborated
    io.bus      <> DontCare
  }
  
  /**
    * Base class for all data ports. Simply declares the IO.
    */
  abstract class BaseDMemPort extends Module {
    val io = IO (new Bundle {
      val pipeline = new DMemPortIO
      val bus = Flipped (new MemPortBusIO)
    })
  
    io.pipeline <> 0.U.asTypeOf (new DMemPortIO)
    // Intentional DontCare:
    // The connections between the ports and the backing memory, along with the
    // ports internally assigning values to the, means that these DontCares
    // should be completely 'overwritten' when the CPU is elaborated
    io.bus      <> DontCare
  
    io.pipeline.good := io.bus.response.valid
  }
  
  /**
   * The modified asynchronous form of the dual ported memory module.
   * When io.imem.request.valid or io.imem.request.valid is true and the memory is ready for an operation,
   * this memory module simulates the latency of real DRAM by pushing memory accesses into pipes that delay
   * the request for a configurable latency.
   *
   * As with the synced memory module, this memory should only be instantiated in the Top file,
   * and never within the actual CPU.
   *
   * The I/O for this module is defined in [[MemPortBusIO]].
   */
  class DualPortedNonCombinMemory(size: Int, memfile: String, latency: Int) extends BaseDualPortedMemory(size, memfile) {
    def wireMemPipe(portio: MemPortBusIO, pipe: Pipe[Request]): Unit = {
      pipe.io.enq.bits      <> DontCare
      pipe.io.enq.valid     := false.B
      portio.response.valid := false.B
  
      // Memory is technically always ready, but we want to use the
      // ready/valid interface so that if needed we can restrict
      // executing memory operations
      portio.request.ready := true.B
    }
    assert(latency > 0) // Check for attempt to make combinational memory
  
    // Instruction port
    val imemPipe = Module(new Pipe(new Request, latency))
  
    wireMemPipe(io.imem, imemPipe)
  
    when (io.imem.request.valid) {
      // Put the Request into the instruction pipe and signal that instruction memory is busy
      val inRequest = io.imem.request.bits
      imemPipe.io.enq.bits  := inRequest
      imemPipe.io.enq.valid := true.B
    } .otherwise {
      imemPipe.io.enq.valid := false.B
    }
  
    when (imemPipe.io.deq.valid) {
      // We should only be expecting a read from instruction memory
      assert(imemPipe.io.deq.bits.operation === MemoryOperation.Read)
      val outRequest = imemPipe.io.deq.bits
      // Check that address is pointing to a valid location in memory
      assert (outRequest.address < size.U)
      io.imem.response.valid        := true.B
      io.imem.response.bits.data := Cat(Fill(32, 0.U(1.W)), memory(outRequest.address >> 2)(31, 0))
    } .otherwise {
      // The memory's response can't possibly be valid if the imem pipe isn't outputting a valid request
      io.imem.response.valid := false.B
    }
  
    // Data port
  
    val dmemPipe     = Module(new Pipe(new Request, latency))
  
    wireMemPipe(io.dmem, dmemPipe)
  
    when (io.dmem.request.valid) {
      // Put the Request into the data pipe and signal that data memory is busy
      val inRequest = io.dmem.request.bits
      dmemPipe.io.enq.bits  := inRequest
      dmemPipe.io.enq.valid := true.B
    } .otherwise {
      dmemPipe.io.enq.valid := false.B
    }
  
    when (dmemPipe.io.deq.valid) {
      assert (dmemPipe.io.deq.bits.operation =/= MemoryOperation.ReadWrite)
      // Dequeue request and execute
      val outRequest = dmemPipe.io.deq.bits
      val address = outRequest.address >> 2
      // Check that address is pointing to a valid location in memory
      assert (outRequest.address < size.U)
  
      when (outRequest.operation === MemoryOperation.Read) {
        io.dmem.response.valid        := true.B
        io.dmem.response.bits.data    := Cat(memory(address + 1.U), memory(address))
      } .elsewhen (outRequest.operation === MemoryOperation.Write) {
        io.dmem.response.valid        := false.B
        memory(address) := outRequest.writedata(31, 0)
        memory(address + 1.U) := outRequest.writedata(63, 32)
      }
    } .otherwise {
      // The memory's response can't possibly be valid if the dmem pipe isn't outputting a valid request
      io.dmem.response.valid := false.B
    }
  }
  
  // A Bundle used for temporarily storing the necessary information for a  read/write in the data memory accessor.
  class OutstandingReq extends Bundle {
    val address   = UInt(64.W)
    val writedata = UInt(64.W)
    val maskmode  = UInt(2.W)
    val operation = MemoryOperation()
    val sext      = Bool()
  }
  
  /**
   * The instruction memory port. Since both the combinational and noncombinational instruction ports just issue
   * read requests in the same way both ports have the same implementation
   *
   * The I/O for this module is defined in [[IMemPortIO]].
   */
  class INonCombinMemPort extends ICombinMemPort {
    // Non-combinational memory can technically always accept requests since they are delayed through a pipe.
    // But we want to be able to signal that the memory is holding a request, so a register is used to store
    // whether a request passed through this memory port
    val imemBusy = RegInit(false.B)
  
    io.pipeline.good := io.bus.response.valid
  
    when (io.pipeline.valid) {
      imemBusy := true.B
    } .elsewhen (io.bus.response.valid) {
      imemBusy := false.B
    }
  
    io.pipeline.ready := !imemBusy
  }
  
  /**
   * The data memory port.
   *
   * The I/O for this module is defined in [[DMemPortIO]].
   */
  class DNonCombinMemPort extends BaseDMemPort {
  
    val dmem_busy = RegInit(false.B)
  
    // A register to hold intermediate data (e.g., write data, mask mode) while the request
    // is outstanding to memory.
    val outstandingReq = Reg (Valid (new OutstandingReq))
    outstandingReq.valid := false.B
  
    // Used to set the valid bit of the outstanding request
    val sending = Wire(Bool())
  
    // When the pipeline is supplying a valid read OR write request, send out the request
    // ... on the condition that there isn't an outstanding request in the queue.
    // We need to process outstanding request first to guarantee atomicity of the memory write operation
    // Ready if either we don't have an outstanding request or the outstanding request is a read and
    // it has been satisfied this cycle. Note: we cannot send a read until one cycle after the write has
    // been sent.
    val ready = !outstandingReq.valid || (io.bus.response.valid && (outstandingReq.valid && outstandingReq.bits.operation === MemoryOperation.Read))
    when (!dmem_busy && io.pipeline.valid && (io.pipeline.memread || io.pipeline.memwrite) && ready) {
      // Check if we aren't issuing both a read and write at the same time
      assert (! (io.pipeline.memread && io.pipeline.memwrite))
  
      // On either a read or write we must read a whole block from memory. Store the necessary
      // information to redirect the memory's response back into itself through a write
      // operation and get the right subset of the block on a read.
      outstandingReq.bits.address   := io.pipeline.address
      outstandingReq.bits.writedata := io.pipeline.writedata
      outstandingReq.bits.maskmode  := io.pipeline.maskmode
      outstandingReq.bits.sext      := io.pipeline.sext
      when (io.pipeline.memwrite) {
        outstandingReq.bits.operation := MemoryOperation.Write
      } .otherwise {
        outstandingReq.bits.operation := MemoryOperation.Read
      }
      sending := true.B
      dmem_busy := true.B
  
      // Program memory to perform a read. Always read since we must read before write.
      io.bus.request.bits.address   := io.pipeline.address
      io.bus.request.bits.writedata := 0.U
      io.bus.request.bits.operation := MemoryOperation.Read
      io.bus.request.valid          := true.B
    } .otherwise {
      // no request coming in so don't send a request out
      io.bus.request.valid := false.B
      sending := false.B
      dmem_busy := false.B
    }
  
    // Response path
    when (io.bus.response.valid) {
      assert(outstandingReq.valid)
  
      dmem_busy := false.B // No longer processing
      when (outstandingReq.bits.operation === MemoryOperation.Write) {
        val writedata = Wire(UInt(64.W))
  
        // When not writing a whole double-word
        when (outstandingReq.bits.maskmode =/= 3.U) {
          // Read in the existing piece of data at the address, so we "overwrite" only part of it
          val offset = outstandingReq.bits.address(1, 0)
          val readdata = Wire(UInt(64.W))
          val writedata_mask = Wire(UInt(64.W))
          val writedata_mask_shifted = Wire(UInt(64.W))
          val writedata_shifted = Wire(UInt(64.W))
          val readdata_mask = Wire(UInt(64.W)) // readdata doesn't need to be shifted
  
          readdata := io.bus.response.bits.data
  
          when (io.pipeline.maskmode === 0.U) { // Byte
            writedata_mask := Cat(Fill(56, 0.U(1.W)), Fill(8, 1.U(1.W)))
          } .elsewhen (io.pipeline.maskmode === 1.U) { // Half-word
            writedata_mask := Cat(Fill(48, 0.U(1.W)), Fill(16, 1.U(1.W)))
          } .elsewhen (io.pipeline.maskmode === 2.U) { // Word
            writedata_mask := Cat(Fill(32, 0.U(1.W)), Fill(32, 1.U(1.W)))
          } .otherwise { // Double-word
            writedata_mask := Fill(64, 1.U(1.W))
          }
  
          writedata_mask_shifted := writedata_mask << (offset * 8.U)
          writedata_shifted := outstandingReq.bits.writedata << (offset * 8.U)
  
          // The read bits and the write bits locations are mutually exclusive
          readdata_mask := ~writedata_mask_shifted
  
          writedata := (readdata & readdata_mask) | (writedata_shifted & writedata_mask_shifted)
        } .otherwise {
          // Write the entire double-word
          writedata := outstandingReq.bits.writedata
        }
  
        // Program the memory to issue a write.
        val request = Wire (new Request)
        request.address   := outstandingReq.bits.address
        request.writedata := writedata
        request.operation := MemoryOperation.Write
        io.bus.request.bits  := request
        io.bus.request.valid := true.B
      } .otherwise {
        // Response is valid and we don't have a stored write.
        // Perform masking and sign extension on read data when memory is outputting it
        val readdata_mask      = Wire(UInt(64.W))
        val readdata_mask_sext = Wire(UInt(64.W))
  
        val offset = outstandingReq.bits.address(1, 0)
        when (outstandingReq.bits.maskmode === 0.U) {
          // Byte
          readdata_mask := (io.bus.response.bits.data >> (offset * 8.U)) & 0xff.U
        } .elsewhen (outstandingReq.bits.maskmode === 1.U) {
          // Half-word
          readdata_mask := (io.bus.response.bits.data >> (offset * 8.U)) & 0xffff.U
        } .elsewhen (outstandingReq.bits.maskmode === 2.U) {
          // Word
          readdata_mask := (io.bus.response.bits.data >> (offset * 8.U)) & 0xffffffffL.U
        } .otherwise {
          // Double-word
          readdata_mask := io.bus.response.bits.data
        }
  
        when (outstandingReq.bits.sext) {
          when (outstandingReq.bits.maskmode === 0.U) {
            // Byte sign extension
            readdata_mask_sext := Cat(Fill(56, readdata_mask(7)),  readdata_mask(7, 0))
          } .elsewhen (outstandingReq.bits.maskmode === 1.U) {
            // Half-word sign extension
            readdata_mask_sext := Cat(Fill(48, readdata_mask(15)), readdata_mask(15, 0))
          } .elsewhen (outstandingReq.bits.maskmode === 2.U) {
            // Word sign extension
            readdata_mask_sext := Cat(Fill(32, readdata_mask(31)), readdata_mask(31, 0))
          } .otherwise {
            // Double-word sign extension (does nothing)
            readdata_mask_sext := readdata_mask
          }
        } .otherwise {
          readdata_mask_sext := readdata_mask
        }
  
        io.pipeline.readdata := readdata_mask_sext
      }
      // Mark the outstanding request register as being invalid, unless sending
      outstandingReq.valid := sending
    } .otherwise {
      // Keep the outstanding request valid or invalid unless sending
      outstandingReq.valid := outstandingReq.valid | sending
    }
  }
  
  
  
  /**
    * The instruction memory port.
    *
    * The I/O for this module is defined in [[IMemPortIO]].
    */
  class ICombinMemPort extends BaseIMemPort {
    // When the pipeline is supplying a high valid signal
    when (io.pipeline.valid) {
      val request = Wire(new Request)
      request.address   := io.pipeline.address
      request.operation := MemoryOperation.Read
      request.writedata := 0.U
  
      io.bus.request.bits  := request
      io.bus.request.valid := true.B
    } .otherwise {
      io.bus.request.valid := false.B
    }
  
    // Combinational memory is always ready
    io.pipeline.ready := true.B
  
    // When the memory is outputting a valid instruction
    io.pipeline.good := true.B
    io.pipeline.instruction := io.bus.response.bits.data
  }
  
  /**
    * The data memory port.
    *
    * The I/O for this module is defined in [[DMemPortIO]].
    */
  class DCombinMemPort extends BaseDMemPort {
    io.pipeline.good := true.B
  
    when (io.pipeline.valid && (io.pipeline.memread || io.pipeline.memwrite)) {
      // Check that we are not issuing a read and write at the same time
      assert(!(io.pipeline.memread && io.pipeline.memwrite))
  
      io.bus.request.bits.address := io.pipeline.address
      io.bus.request.valid := true.B
  
      when (io.pipeline.memwrite) {
        // We issue a ReadWrite to the backing memory.
        // Basic run-down of the ReadWrite operation:
        // - DCombinMemPort sends a ReadWrite at a specific address, **addr**.
        // - Backing memory outputs the data at **addr** in io.response
        // - DCombinMemPort notes that io.memwrite is high in the response path. io.response.bits.data
        //   is masked and sign extended, and sent down io.request.writedata
        // - Backing memory receives the modified writedata and feeds it into the memory at **addr**.
        // Since this is combinational logic, this should theoretically all resolve in one clock cycle with no issues
        io.bus.request.bits.operation := MemoryOperation.ReadWrite
      } .otherwise {
        // Issue a normal read to the backing memory
        io.bus.request.bits.operation := MemoryOperation.Read
      }
    } .otherwise {
      // no request coming in so don't send a request out
      io.bus.request.valid := false.B
    }
  
    // Response path
    when (io.bus.response.valid) {
      when (io.pipeline.memwrite) {
        // Perform writedata modification and send it down io.request.writedata.
        val writedata = Wire (UInt (64.W))
  
        // When not writing a whole doubleword
        when (io.pipeline.maskmode =/= 3.U) {
          // Read in the existing piece of data at the address, so we "overwrite" only part of it
          val offset = io.pipeline.address(1, 0)
          val readdata = Wire(UInt(64.W))
          val writedata_mask = Wire(UInt(64.W))
          val writedata_mask_shifted = Wire(UInt(64.W))
          val writedata_shifted = Wire(UInt(64.W))
          val readdata_mask = Wire(UInt(64.W)) // readdata doesn't need to be shifted
  
          readdata := io.bus.response.bits.data
  
          when (io.pipeline.maskmode === 0.U) { // Byte
            writedata_mask := Cat(Fill(56, 0.U(1.W)), Fill(8, 1.U(1.W)))
          } .elsewhen (io.pipeline.maskmode === 1.U) { // Half-word
            writedata_mask := Cat(Fill(48, 0.U(1.W)), Fill(16, 1.U(1.W)))
          } .elsewhen (io.pipeline.maskmode === 2.U) { // Word
            writedata_mask := Cat(Fill(32, 0.U(1.W)), Fill(32, 1.U(1.W)))
          } .otherwise { // Double-word
            writedata_mask := Fill(64, 1.U(1.W))
          }
  
          writedata_mask_shifted := writedata_mask << (offset * 8.U)
          writedata_shifted := io.pipeline.writedata << (offset * 8.U)
  
          // The read bits and the write bits locations are mutually exclusive
          readdata_mask := ~writedata_mask_shifted
  
          writedata := (readdata & readdata_mask) | (writedata_shifted & writedata_mask_shifted)
        } .otherwise {
          writedata := io.pipeline.writedata
        }
  
        io.bus.request.bits.writedata := writedata
      } .elsewhen (io.pipeline.memread) {
        // Perform normal masking and sign extension on the read data
        val readdata_mask      = Wire(UInt(64.W))
        val readdata_mask_sext = Wire(UInt(64.W))
  
        val offset = io.pipeline.address(1, 0)
        when (io.pipeline.maskmode === 0.U) {
          // Byte
          readdata_mask := (io.bus.response.bits.data >> (offset * 8.U)) & 0xff.U
        } .elsewhen (io.pipeline.maskmode === 1.U) {
          // Half-word
          readdata_mask := (io.bus.response.bits.data >> (offset * 8.U)) & 0xffff.U
        } .elsewhen (io.pipeline.maskmode === 2.U) {
          // Word
          readdata_mask := (io.bus.response.bits.data >> (offset * 8.U)) & 0xffffffffL.U
        } .otherwise {
          // Double-word
          readdata_mask := io.bus.response.bits.data
        }
  
        when (io.pipeline.sext) {
          when (io.pipeline.maskmode === 0.U) {
            // Byte sign extension
            readdata_mask_sext := Cat(Fill(56, readdata_mask(7)),  readdata_mask(7, 0))
          } .elsewhen (io.pipeline.maskmode === 1.U) {
            // Half-word sign extension
            readdata_mask_sext := Cat(Fill(48, readdata_mask(15)), readdata_mask(15, 0))
          } .elsewhen (io.pipeline.maskmode === 2.U) {
            // Word sign extension
            readdata_mask_sext := Cat(Fill(32, readdata_mask(31)), readdata_mask(31, 0))
          } .otherwise {
            // Double-word sign extension (does nothing)
            readdata_mask_sext := readdata_mask
          }
        } .otherwise {
          readdata_mask_sext := readdata_mask
        }
  
        io.pipeline.readdata := readdata_mask_sext
      }
    }
  }
  
  /**
   * A generic ready/valid interface for MemPort modules, whose IOs extend this.
   *
   * This interface corresponds with the pipeline <=> port interface between the
   * pipelined CPU and the memory port.
   *
   * Input:  address, the address of a piece of data in memory.
   * Input:  valid, true when the address specified is valid
   * Output: good, true when memory is responding with a piece of data (used to un-stall the pipeline)
   *
   */
  class MemPortIO extends Bundle {
    // Pipeline <=> Port
    val address  = Input(UInt(64.W))
    val valid    = Input(Bool())
    val good     = Output(Bool())
  }
  
  /**
   * The *interface* of the IMemPort module.
   *
   * Pipeline <=> Port:
   *   Input:  address, the address of an instruction in memory
   *   Input:  valid, true when the address specified is valid
   *   Output: instruction, the requested instruction
   *   Output: good, true when memory is responding with a piece of data
   *   Output: ready, true when the memory is ready to accept another request (used to un-stall the pipeline)
   */
  class IMemPortIO extends MemPortIO {
    val instruction = Output(UInt(64.W))
    val ready       = Output(Bool())
  }
  
  /**
   * The *interface* of the DMemPort module.
   *
   * Pipeline <=> Port:
   *   Input:  address, the address of a piece of data in memory.
   *   Input:  writedata, valid interface for the data to write to the address
   *   Input:  valid, true when the address (and writedata during a write) specified is valid
   *   Input:  memread, true if we are reading from memory
   *   Input:  memwrite, true if we are writing to memory
   *   Input:  maskmode, mode to mask the result. 0 means byte, 1 means halfword, 2 means word, 3 means doubleword
   *   Input:  sext, true if we should sign extend the result
   *   Output: readdata, the data read and sign extended
   *   Output: good, true when memory is responding with a piece of data
   */
  class DMemPortIO extends MemPortIO {
    // Pipeline <=> Port
    val writedata = Input(UInt(64.W))
    val memread   = Input(Bool())
    val memwrite  = Input(Bool())
    val maskmode  = Input(UInt(2.W))
    val sext      = Input(Bool())
  
    val readdata  = Output(UInt(64.W))
  }
  
  // A Bundle used for representing a memory access by instruction memory or data memory.
  class Request extends Bundle {
    val address      = UInt(64.W)
    val writedata    = UInt(64.W)
    val operation    = MemoryOperation()
  }
  
  // A bundle used for representing the memory's response to a memory read operation, which
  // is sent back to the issuing memory port.
  class Response extends Bundle {
    // The 8-byte-wide block of data being returned by memory
    val data         = UInt(64.W)
  }
  
  /**
   * The generic interface for communication between the IMem/DMemPort modules and the backing memory.
   * This interface corresponds with the port <=> memory interface between the
   * memory port and the backing memory.
   *
   * Input:  request, the ready/valid interface for a MemPort module to issue Requests to. Memory
   *         will only accept a request when both request.valid (the MemPort is supplying valid data)
   *         and request.ready (the memory is idling for a request) are high.
   *
   * Output: response, the valid interface for the data outputted by memory if it was requested to read.
   *         the bits in response.bits should only be treated as valid data when response.valid is high.
   */
  class MemPortBusIO extends Bundle {
    val request  = Flipped(Decoupled (new Request))
    val response = Valid (new Response)
  }
  /**
   * A 32 entry two read port one write port register file.
   *
   * Note: this register file *has* an entry for register 0, and it's possible to
   * overwrite the default 0 value. Thus, you need to add extra logic to the
   * DINO CPU control or data path to make sure you always get 0 from register 0.
   *
   * Note: The chisel registers cannot be read and written on the same cycle.
   * Therefore, we have a bypass logic for when a register is read in the same
   * cycle it is written. However, for the single cycle CPU this causes a
   * combinational loop. Thus, we must have different logic when creating a
   * single cycle vs pipelined CPU.
   *
   * Basic operation:
   *   readdata1 = R[readreg1]
   *   readdata2 = R[readreg2]
   *   if (wen) R[writereg] = writedata
   *
   * Input:  readreg1, the number of the register to read
   * Input:  readreg2, the number of the register to read
   * Input:  writereg, the number of the register to write
   * Input:  writedata, the data to write into R[writereg]
   * Input:  wen, write enable. If true, write the writereg register
   *
   * Output: readdata1, the data in register number readreg1 (R[readreg1])
   * Output: readdata2, the data in register number readreg2 (R[readreg2])
   *
   * For more information, see section 4.3 of Patterson and Hennessy
   */
  class RegisterFile(implicit val conf: CPUConfig) extends Module {
    val io = IO(new Bundle {
      val readreg1  = Input(UInt(5.W))
      val readreg2  = Input(UInt(5.W))
      val writereg  = Input(UInt(5.W))
      val writedata = Input(UInt(64.W))
      val wen       = Input(Bool())
  
      val readdata1 = Output(UInt(64.W))
      val readdata2 = Output(UInt(64.W))
    })
  
    // Required so the compiler doesn't optimize things away when testing
    // incomplete designs.
    dontTouch(io)
  
    val regs = Reg(Vec(32, UInt(64.W)))
  
    // When the write enable is high, write the data
    when (io.wen) {
      regs(io.writereg) := io.writedata
    }
  
    // *Always* read the data. This is required for the single cycle CPU since in a single cycle it
    // might both read and write the registers (e.g., an add)
    io.readdata1 := regs(io.readreg1)
    io.readdata2 := regs(io.readreg2)
  
    if (conf.cpuType != "single-cycle") {
      // For the five-cycle and pipelined CPU forward the data through the register file
      when (io.readreg1 === io.writereg && io.wen) {
        io.readdata1 := io.writedata
      }
      when (io.readreg2 === io.writereg && io.wen) {
        io.readdata2 := io.writedata
      }
    }
  }
  
  /**
   * A simple adder which takes two inputs and returns the sum
   *
   * Input:  inputx the first input operand
   * Input:  inputy the second input operand
   * Output: result first + second
   */
  class Adder extends Module {
    val io = IO(new Bundle{
      val inputx    = Input(UInt(64.W))
      val inputy    = Input(UInt(64.W))
  
      val result    = Output(UInt(64.W))
    })
  
    io.result := io.inputx + io.inputy
  }
  
  /**
   * Takes a RISC-V instruction and returns the sign-exteneded immediate value
   * Note that different RISC-V instruction types have different bits used as the immediate.
   * Also,for the B type and j-type instruction the values are *already* shifted left on the
   * output.
   *
   * Input:  instruction the input full encoded RISC-V instruction
   * Output: sextImm the output sign-extended immediate value encoded in the instruction
   */
  class ImmediateGenerator extends Module {
    val io = IO(new Bundle{
      val instruction = Input(UInt(64.W))
  
      val sextImm     = Output(UInt(64.W))
    })
  
    io.sextImm := 0.U
  
    val opcode = io.instruction(6,0)
  
    switch(opcode) {
      is("b0110111".U) { // U-type (lui)
        // RV64I lui
        // imm = cat(sign_extended_bits, imm[31:12], padding 0s)
        //           (32 bits)           (20 bits)   (12 bits)
        val imm = io.instruction(31, 12)
        io.sextImm := Cat(Fill(32, imm(19)), imm, Fill(12, 0.U))
      }
      is("b0010111".U) { // U-type (auipc)
        // RV64I auipc
        // imm = cat(sign_extended_bits, imm[31:12], padding 0s)
        //           (32 bits)           (20 bits)   (12 bits)
        val imm = io.instruction(31, 12)
        io.sextImm := Cat(Fill(32, imm(19)), imm, Fill(12, 0.U))
      }
      is("b1101111".U) { // J-type (jal)
        // riscv-spec: JAL encodes the offset as a multiple of 2 bytes
        // imm = sign_extends(2 * offset)
        val imm = Cat(io.instruction(31), io.instruction(19,12),
                      io.instruction(20), io.instruction(30,21))
        io.sextImm := Cat(Fill(43, imm(19)), imm, 0.U)
      }
      is("b1100111".U) { // I-type (jalr)
        val imm = io.instruction(31, 20)
        io.sextImm := Cat(Fill(52,imm(11)), imm)
      }
      is("b1100011".U) { // B-type
        val imm = Cat(io.instruction(31), io.instruction(7),
                      io.instruction(30,25), io.instruction(11,8))
        io.sextImm := Cat(Fill(51, imm(11)), imm, 0.U)
      }
      is("b0000011".U) { // I-type (ld)
        val imm = io.instruction(31, 20)
        io.sextImm := Cat(Fill(52, imm(11)), imm)
      }
      is("b0100011".U) { // S-type (st)
        val imm = Cat(io.instruction(31, 25), io.instruction(11,7))
        io.sextImm := Cat(Fill(52, imm(11)), imm)
      }
      is("b0010011".U) { // I-type (immediate arith.) 32-bit
        val imm = io.instruction(31, 20)
        io.sextImm := Cat(Fill(52,imm(11)), imm) // for instructions using shift amount, this imm is also valid as only the lower 5 bits (24, 20) are used
      }
      is("b0011011".U) { // I-type (immediate arith.)
        val imm = io.instruction(31, 20)
        io.sextImm := Cat(Fill(52,imm(11)), imm) // for instructions using shift amount, this imm is also valid as only the lower 6 bits (25, 20) are used
      }
      is("b1110011".U) { // zimm for csri
        io.sextImm := Cat(Fill(59,0.U), io.instruction(19,15))
      }
    }
  }
  
  import chisel3.ChiselEnum
  object MemoryOperation extends ChiselEnum {
    val Read, Write, ReadWrite = Value
  }
  // This file is where all of the CPU components are assembled into the whole CPU
  
  /**
   * The main CPU definition that hooks up all of the other components.
   *
   * For more information, see section 4.4 of Patterson and Hennessy
   * This follows figure 4.21
   */
  class SingleCycleCPU(implicit val conf: CPUConfig) extends BaseCPU {
    // All of the structures required
    val pc         = dontTouch(RegInit(0.U(64.W)))
    val control    = Module(new Control())
    val registers  = Module(new RegisterFile())
    val aluControl = Module(new ALUControl())
    val alu        = Module(new ALU())
    val immGen     = Module(new ImmediateGenerator())
    val nextpc     = Module(new NextPC())
    val (cycleCount, _) = Counter(true.B, 1 << 30)
  
    //FETCH
    io.imem.address := pc
    io.imem.valid := true.B
  
    val instruction = Wire(UInt(32.W))
    when ((pc % 8.U) === 4.U) {
      instruction := io.imem.instruction(63, 32)
    } .otherwise {
      instruction := io.imem.instruction(31, 0)
    }
    val funct3 = instruction(14, 12)
  
    control.io.opcode := instruction(6, 0)
  
    registers.io.readreg1 := instruction(19, 15)
    registers.io.readreg2 := instruction(24, 20)
    registers.io.writereg := instruction(11, 7)
    registers.io.writedata := Mux(control.io.toreg, io.dmem.readdata, Mux(control.io.resultselect, immGen.io.sextImm, alu.io.result))
    when (registers.io.writereg =/= 0.U && control.io.regwrite) {
      registers.io.wen := true.B
    } .otherwise {
      registers.io.wen := false.B
    }
  
    immGen.io.instruction := instruction
  
    nextpc.io.branch := control.io.branch
    nextpc.io.jumptype := control.io.jumptype
    nextpc.io.inputx := registers.io.readdata1
    nextpc.io.inputy := alu.io.inputy
    nextpc.io.funct3 := funct3
    nextpc.io.pc := pc
    nextpc.io.imm := immGen.io.sextImm
  
    aluControl.io.aluop := control.io.aluop
    aluControl.io.itype := control.io.itype
    aluControl.io.funct7 := instruction(31, 25)
    aluControl.io.funct3 := instruction(14, 12)
    aluControl.io.wordinst := control.io.wordinst
  
    alu.io.operation := aluControl.io.operation
    alu.io.inputx := Mux(control.io.src1, pc, registers.io.readdata1)
    alu.io.inputy := MuxCase(0.U, Seq((control.io.src2 === 0.U) -> registers.io.readdata2,
                                        (control.io.src2 === 1.U) -> immGen.io.sextImm,
                                        (control.io.src2 === 2.U) -> 4.U))
  
    io.dmem.address := alu.io.result
    io.dmem.memread := ~control.io.memop(0)
    io.dmem.memwrite := control.io.memop(0)
    io.dmem.valid := control.io.memop(1)
    io.dmem.maskmode := funct3(1, 0)
    io.dmem.sext := ~funct3(2)
    io.dmem.writedata := registers.io.readdata2
  
    pc := nextpc.io.nextpc
  }
  
  /*
   * Object to make it easier to print information about the CPU
   */
  object SingleCycleCPUInfo {
    def getModules(): List[String] = {
      List(
        "dmem",
        "imem",
        "control",
        "registers",
        "csr",
        "aluControl",
        "alu",
        "immGen",
        "nextpc"
      )
    }
  }
  // The IO between the core and the rest of the system
  
  class CoreIO extends Bundle {
    val imem = Flipped(new IMemPortIO)
    val dmem = Flipped(new DMemPortIO)
  }
  
  // Control logic for the processor
  import chisel3.util.{BitPat, ListLookup}
  
  /**
   * Main control logic for our simple processor
   *
   * Input: opcode:        Opcode from instruction
   *
   * Output: itype         True if we're working on an itype instruction, False otherwise
   * Output: aluop         True if inst is of R-type or I-type, False otherwise
   * Output: src1          Source for the first ALU/nextpc input (0 if source is readdata1, 1 if source is pc)
   * Output: src2          Source for the second ALU/nextpc input (00 if source is readdata2, 01 if source is immediate, 10 if source is a hardwired value 4 (i.e., alu's inputy = 4))
   * Output: branch        True if branch, False otherwise
   * Output: jumptype      00 if not a jump inst, 10 if inst is jal, 11 is inst is jalr
   * Output: resultselect  0 for result from alu, 1 for immediate
   * Output: memop         00 if not using memory, 10 if reading, and 11 if writing
   * Output: toreg         0 for result from execute, 1 for data from memory
   * Output: regwrite      True if writing to the register file, False otherwise
   * Output: validinst     True if the instruction we're decoding is valid, False otherwise
   * Output: wordinst      True if the instruction *only* operates on 32-bit operands, False otherwise
   *
   * For more information, see section 4.4 of Patterson and Hennessy.
   * This follows figure 4.22.
   */
  
  class Control extends Module {
    val io = IO(new Bundle {
      val opcode = Input(UInt(7.W))
  
      val itype        = Output(Bool())
      val aluop        = Output(Bool())
      val src1         = Output(Bool())
      val src2         = Output(UInt(2.W))
      val branch       = Output(Bool())
      val jumptype     = Output(UInt(2.W))
      val resultselect = Output(Bool())
      val memop        = Output(UInt(2.W))
      val toreg        = Output(Bool())
      val regwrite     = Output(Bool())
      val validinst    = Output(Bool())
      val wordinst     = Output(Bool())
    })
  
    val signals =
      ListLookup(io.opcode,
        /*default*/           List(false.B, false.B, false.B,  0.U,  false.B,       0.U,      false.B,   0.U, false.B,  false.B,   false.B,  false.B),
        Array(              /*       itype,   aluop,    src1, src2,   branch,  jumptype, resultselect, memop,   toreg, regwrite, validinst, wordinst */
        // R-format
        BitPat("b0110011") -> List(false.B,  true.B, false.B,  0.U,  false.B,       0.U,      false.B,   0.U, false.B,   true.B,    true.B,  false.B),
        // I-format
        BitPat("b0010011") -> List( true.B,  true.B, false.B,  1.U,  false.B,       0.U,      false.B,   0.U, false.B,   true.B,    true.B,  false.B),
        // load
        BitPat("b0000011") -> List(false.B, false.B, false.B,  1.U,  false.B,       0.U,      false.B,   2.U,  true.B,   true.B,    true.B,  false.B),
        // store
        BitPat("b0100011") -> List(false.B, false.B, false.B,  1.U,  false.B,       0.U,      false.B,   3.U, false.B,  false.B,    true.B,  false.B),
        // branch
        BitPat("b1100011") -> List(false.B, false.B, false.B,  0.U,   true.B,       0.U,      false.B,   0.U, false.B,  false.B,    true.B,  false.B),
        // lui
        BitPat("b0110111") -> List(false.B, false.B, false.B,  0.U,  false.B,       0.U,       true.B,   0.U, false.B,   true.B,    true.B,  false.B),
        // auipc
        BitPat("b0010111") -> List(false.B, false.B,  true.B,  1.U,  false.B,       0.U,      false.B,   0.U, false.B,   true.B,    true.B,  false.B),
        // jal
        BitPat("b1101111") -> List(false.B, false.B,  true.B,  2.U,  false.B,       2.U,      false.B,   0.U, false.B,   true.B,    true.B,  false.B),
        // jalr
        BitPat("b1100111") -> List(false.B, false.B,  true.B,  2.U,  false.B,       3.U,      false.B,   0.U, false.B,   true.B,    true.B,  false.B),
        // I-format 32-bit operands
        BitPat("b0011011") -> List( true.B,  true.B, false.B,  1.U,  false.B,       0.U,      false.B,   0.U, false.B,   true.B,    true.B,   true.B),
        // R-format 32-bit operands
        BitPat("b0111011") -> List(false.B,  true.B, false.B,  0.U,  false.B,       0.U,      false.B,   0.U, false.B,   true.B,    true.B,   true.B),
        ) // Array
      ) // ListLookup
  
    io.itype        := signals(0)
    io.aluop        := signals(1)
    io.src1         := signals(2)
    io.src2         := signals(3)
    io.branch       := signals(4)
    io.jumptype     := signals(5)
    io.resultselect := signals(6)
    io.memop        := signals(7)
    io.toreg        := signals(8)
    io.regwrite     := signals(9)
    io.validinst    := signals(10)
    io.wordinst     := signals(11)
  }
  
  /**
   * The ALU
   *
   * Input:  operation, specifies which operation the ALU should perform
   * Input:  inputx, the first input (e.g., reg1)
   * Input:  inputy, the second input (e.g., reg2)
   * Output: the result of the computation
   */
  class ALU extends Module {
    val io = IO(new Bundle {
      val operation = Input(UInt(5.W))
      val inputx    = Input(UInt(64.W))
      val inputy    = Input(UInt(64.W))
  
      val result    = Output(UInt(64.W))
    })
  
    val wordinst = Mux(io.operation(4) === 1.U, true.B, false.B)
    val aluop = io.operation(3, 0)
  
    // this function casts the input to 32-bit UInt, then sign extends it
    val signExtend32To64 = (input: UInt) => Cat(Fill(32, input(31)), input(31, 0))
    val operand1_32 = io.inputx(31, 0)
    val operand2_32 = io.inputy(31, 0)
  
    when (aluop === "b0110".U) { // and
      io.result := io.inputx & io.inputy
    }
    .elsewhen (aluop === "b0101".U) { // or
      io.result := io.inputx | io.inputy
    }
    .elsewhen (aluop === "b0111".U) { // add
      when (wordinst === true.B) {
        io.result := signExtend32To64(operand1_32 + operand2_32) // + results in width of max(width(op1), width(op2))
      } .otherwise {
        io.result := io.inputx + io.inputy
      }
    }
    .elsewhen (aluop === "b0100".U) { // sub
      when (wordinst === true.B) {
        io.result := signExtend32To64(operand1_32 - operand2_32)
      } .otherwise {
        io.result := io.inputx - io.inputy
      }
    }
    .elsewhen (aluop === "b0011".U) { // sra*
      when (wordinst === true.B) { // sraw
        io.result := signExtend32To64((operand1_32.asSInt >> operand2_32(4, 0)).asUInt) // arithmetic (signed)
                                                                                        // sraw takes 5 bits of op2
      } .otherwise { // sra
        io.result := (io.inputx.asSInt >> io.inputy(5, 0)).asUInt // sra takes 6 bits of op2
      }
    }
    .elsewhen (aluop === "b0001".U) { // sltu
      io.result := (io.inputx < io.inputy)
    }
    .elsewhen (aluop === "b0000".U) { // xor
      io.result := io.inputx ^ io.inputy
    }
    .elsewhen (aluop === "b0010".U) { // srl*
      when (wordinst === true.B) { // srlw
        io.result := signExtend32To64(operand1_32 >> operand2_32(4, 0)) // srlw takes 5 bits of op2
      } .otherwise {
        io.result := io.inputx >> io.inputy(5, 0) // srl takes 6 bits of op2
      }
    }
    .elsewhen (aluop === "b1001".U) { // slt
      io.result := (io.inputx.asSInt < io.inputy.asSInt).asUInt // signed
    }
    .elsewhen (aluop === "b1000".U) { // sll*
      when (wordinst === true.B) { // sllw
        io.result := signExtend32To64(operand1_32 << operand2_32(4, 0)) // sllw takes 5 bits of op2
      } .otherwise {
        io.result := io.inputx << io.inputy(5, 0) // sll takes 6 bits of op2
      }
    }
    .elsewhen (aluop === "b1010".U) { // nor
      io.result := ~(io.inputx | io.inputy)
    }
    .elsewhen (aluop === "b1011".U) { // sge (set greater than or equal)
      io.result := (io.inputx.asSInt >= io.inputy.asSInt).asUInt
    }
    .elsewhen (aluop === "b1100".U) { // sgeu (set greater than or equal unsigned)
      io.result := (io.inputx >= io.inputy)
    }
    .elsewhen (aluop === "b1101".U) { // seq (set equal)
      io.result := io.inputx === io.inputy
    }
    .elsewhen (aluop === "b1110".U) { // sne (set not equal)
      io.result := io.inputx =/= io.inputy
    }
    .otherwise {
      io.result := 0.U // should be invalid
    }
  }
  
  // This file contains ALU control logic.
  /**
   * The ALU control unit
   *
   * Input:  aluop        0 for ld/st, 1 for R-type
   * Input:  itype        True if I-type
   * Input:  funct7       The most significant bits of the instruction
   * Input:  funct3       The middle three bits of the instruction (12-14)
   * Input:  wordinst     True if the instruction *only* operates on 32-bit operands, False otherwise
   * Output: operation    What we want the ALU to do.
   *
   * For more information, see Section 4.4 and A.5 of Patterson and Hennessy.
   * This is loosely based on figure 4.12
   */
  class ALUControl extends Module {
    val io = IO(new Bundle {
      val aluop     = Input(Bool())
      val itype     = Input(Bool())
      val funct7    = Input(UInt(7.W))
      val funct3    = Input(UInt(3.W))
      val wordinst  = Input(Bool())
  
      val operation = Output(UInt(5.W))
    })
  
    when (io.aluop === 0.U) {
      io.operation := "b00111".U // add
    } .otherwise {
      when (io.funct3 === "b000".U) {
        when (io.itype | io.funct7 === "b0000000".U) {
          when (io.wordinst) {
            io.operation := "b10111".U // addw
          } .otherwise {
            io.operation := "b00111".U // add
          }
        } .elsewhen (io.funct7 === "b0100000".U) {
                  when (io.wordinst) {
            io.operation := "b10100".U // subw
          } .otherwise {
            io.operation := "b00100".U // sub
          }
        } .otherwise {
          io.operation := "b11111".U // invalid operation
        }
      } .elsewhen (io.funct3 === "b001".U) {
        when (io.wordinst) {
          io.operation := "b11000".U // sllw
        } .otherwise {
          io.operation := "b01000".U // sll
        }
      } .elsewhen (io.funct3 === "b010".U) {
        io.operation := "b01001".U // slt
      } .elsewhen (io.funct3 === "b011".U) {
        io.operation := "b00001".U // sltu
      } .elsewhen (io.funct3 === "b100".U) {
        io.operation := "b00000".U // xor
      } .elsewhen (io.funct3 === "b101".U) {
        when (io.funct7(6,1) === "b000000".U) {
          when (io.wordinst) {
            io.operation := "b10010".U // srlw
          } .otherwise {
            io.operation := "b00010".U // srl
          }
        } .elsewhen (io.funct7(6,1) === "b010000".U) {
          when (io.wordinst) {
            io.operation := "b10011".U // sraw
          } .otherwise {
            io.operation := "b00011".U // sra
          }
        } .otherwise {
          io.operation := "b11111".U // invalid operation
        }
      } .elsewhen (io.funct3 === "b110".U) {
        io.operation := "b00101".U // or
      } .otherwise { // b111
        io.operation := "b00110".U // and
      }
    }
  }
  
  // Logic to calculate the next pc
  
  /**
   * Next PC unit. This takes various inputs and outputs the next address of the next instruction.
   *
   * Input: branch         True if executing a branch instruction, False otherwise
   * Input: jumptype       00 if not a jump inst, 10 if inst is a jal, 11 if inst is a jalr
   * Input: inputx         First input
   * Input: inputy         Second input
   * Input: funct3         The funct3 from the instruction
   * Input: pc             The *current* program counter for this instruction
   * Input: imm            The sign-extended immediate
   *
   * Output: nextpc        The address of the next instruction
   * Output: taken         True if the next pc is not pc+4
   *
   */
  class NextPC extends Module {
    val io = IO(new Bundle {
      val branch   = Input(Bool())
      val jumptype = Input(UInt(2.W))
      val inputx   = Input(UInt(64.W))
      val inputy   = Input(UInt(64.W))
      val funct3   = Input(UInt(3.W))
      val pc       = Input(UInt(64.W))
      val imm      = Input(UInt(64.W))
  
      val nextpc   = Output(UInt(64.W))
      val taken    = Output(Bool())
    })
  
    when (io.branch) {
      when ( (io.funct3 === "b000".U & io.inputx === io.inputy)
           | (io.funct3 === "b001".U & io.inputx =/= io.inputy)
           | (io.funct3 === "b100".U & io.inputx.asSInt < io.inputy.asSInt)
           | (io.funct3 === "b101".U & io.inputx.asSInt >= io.inputy.asSInt)
           | (io.funct3 === "b110".U & io.inputx < io.inputy)
           | (io.funct3 === "b111".U & io.inputx >= io.inputy)) {
        io.nextpc := io.pc + io.imm
        io.taken := true.B
      }
      .otherwise {
        io.nextpc := io.pc + 4.U
        io.taken := false.B
      }
    } .elsewhen (io.jumptype =/= 0.U) {
      io.nextpc := Mux(io.jumptype(0), io.inputx + io.imm, // jalr
                                       io.pc + io.imm)     // jal
      io.taken := true.B
    } .otherwise {
      io.nextpc := io.pc + 4.U
      io.taken := false.B
    }
  
  }
  // The instruction and data memory modules
  
  /**
    * This is the actual memory. You should never directly use this in the CPU.
    * This module should only be instantiated in the Top file.
    *
    * The I/O for this module is defined in [[MemPortBusIO]].
    */
  
  class DualPortedCombinMemory(size: Int, memfile: String) extends BaseDualPortedMemory (size, memfile) {
    def wireMemPipe(portio: MemPortBusIO): Unit = {
      portio.response.valid := false.B
      // Combinational memory is inherently always ready for port requests
      portio.request.ready := true.B
    }
  
    // Instruction port
  
    wireMemPipe(io.imem)
  
    when (io.imem.request.valid) {
      // Put the Request into the instruction pipe and signal that instruction memory is busy
      val request = io.imem.request.bits
  
      // We should only be expecting a read from instruction memory
      assert(request.operation === MemoryOperation.Read)
      // Check that address is pointing to a valid location in memory
  
      // TODO: Revert this back to the assert form "assert (request.address < size.U)"
      // TODO: once CSR is integrated into CPU
      when (request.address < size.U) {
        io.imem.response.valid := true.B
        val baseAddress = (request.address >> 3.U) << 1.U
        io.imem.response.bits.data := Cat(memory(baseAddress + 1.U), memory(baseAddress))
      } .otherwise {
        io.imem.response.valid := false.B
      }
    } .otherwise {
      io.imem.response.valid := false.B
    }
  
    // Data port
  
    wireMemPipe(io.dmem)
  
    val memAddress = io.dmem.request.bits.address
    val memWriteData = io.dmem.request.bits.writedata
  
    when (io.dmem.request.valid) {
      val request = io.dmem.request.bits
  
      // Check that non-combin write isn't being used
      assert (request.operation =/= MemoryOperation.Write)
      // Check that address is pointing to a valid location in memory
      assert (request.address < size.U)
  
      // Read path
      val baseAddress = memAddress >> 2.U
      io.dmem.response.bits.data := Cat(memory(baseAddress + 1.U), memory(baseAddress))
      io.dmem.response.valid := true.B
  
      // Write path
      when (request.operation === MemoryOperation.ReadWrite) {
        memory(memAddress >> 2) := memWriteData(31, 0)
        memory((memAddress >> 2) + 1.U) := memWriteData(63, 32)
      }
    } .otherwise {
      io.dmem.response.valid := false.B
    }
  }
  
  object Main extends App {
    ChiselStage.emitSystemVerilogFile(
      new Top(new CPUConfig),
      firtoolOpts = Array("-disable-all-randomization","--lowering-options=disallowPackedArrays,disallowLocalVariables")
    )
  }

name: dinocpu
